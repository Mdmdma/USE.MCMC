[{"path":"~ https://danddr.github.io/USE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"~ https://danddr.github.io/USE/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"~ https://danddr.github.io/USE/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"~ https://danddr.github.io/USE/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"~ https://danddr.github.io/USE/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"~ https://danddr.github.io/USE/articles/USE_vignette.html","id":"create-virtual-species","dir":"Articles","previous_headings":"","what":"1. Create Virtual Species","title":"USE vignette","text":"First, download bioclimatic variables WorldClim crop European extent. , generate virtual species using bioclimatic variables downloaded previous step. details methodology used create virtual species, see vignette virtualspecies R package.  Generate presence-data set.","code":"Worldclim <- geodata::worldclim_global(var='bio', res=10, path=getwd())  envData <- terra::crop(Worldclim, terra::ext(-12, 25, 36, 60)) #create virtual species myRandNum <- sample(1:19,size=5, replace = FALSE) envData <- envData[[myRandNum]] set.seed(123) random.sp <- virtualspecies::generateRandomSp(envData,                                                convert.to.PA = FALSE,                                                species.type = \"additive\",                                               realistic.sp = TRUE,                                                plot = FALSE) #reclassify suitability raster using a probability conversion rule new.pres <- virtualspecies::convertToPA(x=random.sp,                        beta=0.55,                       alpha = -0.05, plot = FALSE) #Sample true occurrences presence.points <- virtualspecies::sampleOccurrences(new.pres,                                      n = 300, # The number of points to sample                                      type = \"presence-absence\",                                      sample.prevalence = 0.6,                                      detection.probability = 1,                                      correct.by.suitability = TRUE,                                      plot = TRUE) myPres <- presence.points$sample.points[which(presence.points$sample.points$Observed==1), c( \"x\", \"y\",  \"Observed\")] myPres <- st_as_sf(myPres, coords=c(\"x\", \"y\"), crs=4326)"},{"path":"~ https://danddr.github.io/USE/articles/USE_vignette.html","id":"generating-the-environmental-space","dir":"Articles","previous_headings":"","what":"2. Generating the environmental space","title":"USE vignette","text":"First, environmental space generated performing principal component analysis (PCA) raster stack includes selected spatial environmental layers (precipitation temperature). practice, PCA operates values environmental conditions linked pixels spatial environmental layers. Next, first two principal components extracted PCA create two-dimensional environmental space (’s important note current version USE supports uniform sampling two dimensions). two principal components obtained, new “spatial object” created, PC-scores (represent projection environmental pixels within two-dimensional space) serving object’s coordinates. object scanned systematically gather pseudo-absences. ’s worth mentioning , stage, PC-scores, except associated presence virtual species, considered potential pseudo-absences. function USE.MCMC::optimRes can used find optimal resolution (.e., one providing best trade-fine resolution overfitting environmental space) sampling grid used collect pseudo-absences within environmental space (see ).","code":"rpc <- rastPCA(envData, stand = TRUE) dt <- na.omit(as.data.frame(rpc$PCs[[c(\"PC1\", \"PC2\")]], xy = TRUE)) dt <- sf::st_as_sf(dt, coords = c(\"PC1\", \"PC2\")) myRes <- USE.MCMC::optimRes(sdf=dt,                     grid.res=c(1:10),                     perc.thr = 20,                     showOpt = TRUE,                      cr=5) myRes$Opt_res ## [1] 5"},{"path":"~ https://danddr.github.io/USE/articles/USE_vignette.html","id":"uniform-sampling-of-the-environmental-space","dir":"Articles","previous_headings":"","what":"3. Uniform sampling of the environmental space","title":"USE vignette","text":"provide clear example, function USE.MCMC::uniformSampling utilized systematically search environmental space gather specific number observations cell within sampling grid. resolution grid determined beforehand using USE.MCMC::optimRes function. ’s important note given example, presences pseudo-absences virtual species potentially sampled USE.MCMC::uniformSampling function, main purpose demonstrate operation. subsequent section, USE.MCMC::uniformSampling function internally called USE.MCMC::paSampling, exclusively focusing sampling pseudo-absences. look observations sampled using USE.MCMC::uniformSampling Visualizing coordinates (PC-scores) observations sampled environmental space using USE.MCMC::uniformSampling demonstrates effectiveness uniformly sampling environmental space. approach enables collection data accurately represents entire range environmental gradients. Moreover, mitigates influence “sample location bias,” arises randomly sampling observations geographical space often results overrepresentation frequently encountered environmental conditions. Uniform sampling mitigates adverse impact sample location bias, leading comprehensive understanding environmental variations.","code":"myObs <- USE.MCMC::uniformSampling(sdf=dt,                                grid.res=myRes$Opt_res,                               n.tr = 5,                               sub.ts = TRUE,                               n.ts = 2,                               plot_proc = FALSE) ## Simple feature collection with 18953 features and 3 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: -4.687449 ymin: -4.183169 xmax: 2.763102 ymax: 3.347457 ## CRS:           NA ## First 10 features: ##             x        y                    geometry  ID ## 56  -1.416667 59.91667  POINT (-1.22405 -1.782422)  56 ## 57  -1.250000 59.91667 POINT (-1.145863 -1.756158)  57 ## 58  -1.083333 59.91667 POINT (-1.145957 -1.753242)  58 ## 95   5.083333 59.91667 POINT (0.7805366 -1.031407)  95 ## 96   5.250000 59.91667 POINT (0.7189422 -1.654002)  96 ## 97   5.416667 59.91667  POINT (1.139196 -2.412671)  97 ## 98   5.583333 59.91667 POINT (0.9704425 -2.398938)  98 ## 99   5.750000 59.91667 POINT (0.9498868 -2.391403)  99 ## 100  5.916667 59.91667  POINT (1.581207 -2.415976) 100 ## 101  6.083333 59.91667  POINT (1.843444 -2.201244) 101 head(myObs$obs.tr) ## Simple feature collection with 6 features and 3 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: -2.51107 ymin: -3.288937 xmax: -0.4052154 ymax: -2.683561 ## CRS:           NA ##               x        y    ID                     geometry ## 21228 -3.750000 43.41667 21228   POINT (-2.51107 -2.732245) ## 21229 -3.583333 43.41667 21229  POINT (-2.380254 -2.724758) ## 8783  -9.250000 53.08333  8783 POINT (-0.8998304 -2.970903) ## 10100 -3.750000 52.08333 10100 POINT (-0.4052154 -2.683561) ## 2601  -5.250000 57.91667  2601 POINT (-0.6417641 -3.288937) ## 8585  -6.583333 53.25000  8585  POINT (-1.002097 -2.744004) env_pca <- c(rpc$PCs$PC1, rpc$PCs$PC2) env_pca <- na.omit(as.data.frame(env_pca))  ggplot(env_pca, aes(x=PC1))+   geom_density(aes(color=\"Environment\"), linewidth=1 )+   geom_density(data=data.frame(st_coordinates(myObs$obs.tr)),                 aes(x=X,  color=\"Uniform\"), linewidth=1)+   scale_color_manual(name=NULL,                       values=c('Environment'='#1E88E5', 'Uniform'='#D81B60'))+        labs(y=\"Density of PC-scores\")+   ylim(0,1)+   theme_classic()+   theme(legend.position = \"bottom\",           text = element_text(size=14),           legend.text=element_text(size=12)) ggplot(env_pca, aes(x=PC2))+   geom_density(aes(color=\"Environment\"), linewidth=1 )+   geom_density(data=data.frame(st_coordinates(myObs$obs.tr)),                 aes(x=Y,  color=\"Uniform\"), size=1)+   scale_color_manual(name=NULL,                       values=c('Environment'='#1E88E5', 'Uniform'='#D81B60'))+        labs(y=\"Density of PC-scores\")+   ylim(0,1)+   theme_classic()+   theme(legend.position = \"bottom\",           text = element_text(size=14),           legend.text=element_text(size=12))"},{"path":"~ https://danddr.github.io/USE/articles/USE_vignette.html","id":"uniform-sampling-of-the-pseudo-absences-within-the-environmental-space","dir":"Articles","previous_headings":"","what":"4. Uniform sampling of the pseudo-absences within the environmental space","title":"USE vignette","text":"USE.MCMC::paSampling function performs uniform sampling pseudo-absences within environmental space 2-step procedure: First, kernel-based filter used exclude environmental space observations associated environmental conditions likely suitable species. identify conditions, kernel-based filter uses information environmental conditions species present (.e., presence locations). nutshell, kernel density estimation used derive probability density function observations associated presence virtual species within 2-dimensional environmental space. observations associated probability equal greater given threshold (default set 0.75 USE.MCMC::paSampling) deemed feature suitable environmental conditions species. observations within space characterized combination environmental conditions therefore excluded subsequent step, namely uniform sampling pseudo-absences, reduce number false-absences introduced dataset used train (test) species distribution model. aim, convex hull built delimit areas identified kernel-filter potentially featuring suitable conditions virtual species, observations (.e., PC-scores) within convex hull excluded environmental space; Second, environmental space systematically scanned uniformly sample remaining observations, specifically located outside convex hull established previous step. sampled observations constitute set pseudo-absences employed training testing species distribution model. second step carried USE.MCMC::paSampling function (internally called USE.MCMC::paSampling). Pseudo-absences randomly sampled within cell sampling grid mentioned previous section. Visualizing coordinates (PC-scores) pseudo-absences sampled environmental space using USE.MCMC::paSampling   Visualizing geographic coordinates pseudo-absences sampled environmental space using USE.MCMC::paSampling","code":"myGrid.psAbs <- USE.MCMC::paSampling(env.rast=envData,                                 pres=myPres,                                 thres=0.75,                                 H=NULL,                                 grid.res=as.numeric(myRes$Opt_res),                                 n.tr = 5,                                 prev=0.3,                                 sub.ts=TRUE,                                 n.ts=5,                                 plot_proc=FALSE,                                 verbose=FALSE) ## Simple feature collection with 17651 features and 11 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: -4.687449 ymin: -4.183169 xmax: 2.763102 ymax: 3.347457 ## CRS:           NA ## First 10 features: ##    myID         x        y PA percP wc2.1_10m_bio_4 wc2.1_10m_bio_3 ## 1    56 -1.416667 59.91667  0  pabs        303.8942        35.91226 ## 2    57 -1.250000 59.91667  0  pabs        314.0657        35.61790 ## 3    58 -1.083333 59.91667  0  pabs        301.0999        35.11905 ## 4    95  5.083333 59.91667  0  pabs        447.4889        24.66192 ## 5    96  5.250000 59.91667  0  pabs        456.2110        27.51462 ## 6    97  5.416667 59.91667  0  pabs        482.0984        28.63843 ## 7    98  5.583333 59.91667  0  pabs        495.3697        29.90503 ## 8    99  5.750000 59.91667  0  pabs        507.6086        30.50264 ## 9   100  5.916667 59.91667  0  pabs        538.4310        27.99907 ## 10  101  6.083333 59.91667  0  pabs        563.4677        26.82458 ##    wc2.1_10m_bio_14 wc2.1_10m_bio_9 wc2.1_10m_bio_15 ## 1                49        9.766666         34.94473 ## 2                50        9.841241         34.65442 ## 3                49        9.900000         34.56621 ## 4                70        8.899269         33.28128 ## 5                86        9.107877         33.55249 ## 6               113        8.151105         33.42791 ## 7               112        8.814909         33.89041 ## 8               113        8.610973         34.56706 ## 9               124        7.068494         34.02536 ## 10              124        5.829542         34.49698 ##                       geometry ID ## 1   POINT (-1.22405 -1.782422)  1 ## 2  POINT (-1.145863 -1.756158)  2 ## 3  POINT (-1.145957 -1.753242)  3 ## 4  POINT (0.7805366 -1.031407)  4 ## 5  POINT (0.7189422 -1.654002)  5 ## 6   POINT (1.139196 -2.412671)  6 ## 7  POINT (0.9704425 -2.398938)  7 ## 8  POINT (0.9498868 -2.391403)  8 ## 9   POINT (1.581207 -2.415976)  9 ## 10  POINT (1.843444 -2.201244) 10 ggplot(env_pca, aes(x=PC1))+   geom_density(aes(color=\"Environment\"), linewidth=1 )+   geom_density(data=data.frame(st_coordinates(myGrid.psAbs$obs.tr)),                 aes(x=X,  color=\"Uniform\"), linewidth=1)+   geom_density(data=terra::extract(c(rpc$PCs$PC1, rpc$PCs$PC2), myPres, df=TRUE),                 aes(x=PC1, color=\"Presence\"), linewidth=1 )+   scale_color_manual(name=NULL,                       values=c('Environment'='#1E88E5', 'Uniform'='#D81B60', \"Presence\"=\"black\"))+        labs(y=\"Density of PC-scores\")+   ylim(0,1)+   theme_classic()+   theme(legend.position = \"bottom\",           text = element_text(size=14),           legend.text=element_text(size=12)) ggplot(env_pca, aes(x=PC2))+   geom_density(aes(color=\"Environment\"), linewidth=1 )+   geom_density(data=data.frame(st_coordinates(myGrid.psAbs$obs.tr)),                 aes(x=Y,  color=\"Uniform\"), linewidth=1)+   geom_density(data=terra::extract(c(rpc$PCs$PC1, rpc$PCs$PC2), myPres, df=TRUE),                 aes(x=PC2, color=\"Presence\"), linewidth=1 )+   scale_color_manual(name=NULL,                       values=c('Environment'='#1E88E5', 'Uniform'='#D81B60', \"Presence\"=\"black\"))+        labs(y=\"Density of PC-scores\")+   ylim(0,1)+   theme_classic()+   theme(legend.position = \"bottom\",           text = element_text(size=14),           legend.text=element_text(size=12)) ggplot()+   tidyterra::geom_spatraster(data = new.pres$pa.raster)+   scale_fill_viridis_c(na.value = \"transparent\", breaks=c(0,1)) +   geom_sf(data=myPres,            aes(color= \"Presences\"),            alpha=1, size=2, shape= 19)+   geom_sf(data=st_as_sf(st_drop_geometry(myGrid.psAbs$obs.tr),                          coords = c(\"x\",\"y\"), crs=4326),            aes(color=\"Pseudo-absences\"),            alpha=0.8, size=2, shape = 19 )+     scale_colour_manual(name=NULL,                         values=c('Presences'='steelblue','Pseudo-absences'='#A41616'))+   labs(x=\"Longitude\",         y=\"Latitude\",         fill=\"Virtual species\")+   theme_light()+   theme(legend.position = \"bottom\",           legend.background=element_blank(),         legend.box=\"vertical\",         panel.grid = element_blank(),         text = element_text(size=14),           legend.text=element_text(size=14),          aspect.ratio = 1,          panel.spacing.y = unit(2, \"lines\"))"},{"path":"~ https://danddr.github.io/USE/articles/USE_vignette.html","id":"effect-of-the-kernel-density-threshold-on-the-environmental-sub-space-sampled-to-collect-pseudo-absences","dir":"Articles","previous_headings":"","what":"5. Effect of the kernel density threshold on the environmental sub-space sampled to collect pseudo-absences","title":"USE vignette","text":"Knowing USE.MCMC::paSampling operates evidences importance carefully selecting meaningful threshold kernel density estimation delimit environmental sub-space uniform sampling. However, visualizing impact different threshold selections can challenging. address , incorporated USE.MCMC::thresh.inspect function. function generates plots depict entire environmental space alongside portion excluded based specific kernel density threshold. experimenting various threshold values, users can observe selection affects delineated area collecting pseudo-absences. general, opting lower threshold value leads exclusion larger portion environmental space. allowing users freely determine threshold value kernel-based filter, USE enables handling pseudo-absence sampling diverse ecological scenarios, involving generalist specialist species sink populations.","code":"USE.MCMC::thresh.inspect(env.rast=envData,                     pres=myPres,                     thres=c(0.1, 0.25, 0.5, 0.75, 0.9),                     H=NULL                     )"},{"path":"~ https://danddr.github.io/USE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniele Da Re. Author, maintainer. Enrico Tordoni. Author. Manuele Bazzichetto. Author.","code":""},{"path":"~ https://danddr.github.io/USE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Da Re D, Tordoni E, Lenoir J, Lembrechts J, Vanwambeke S, Rocchini D, Bazzichetto M (2023). “USE : uniformly sampling pseudo-absences within environmental space applications habitat suitability models.” EcoEvoRxiv. https://doi.org/10.32942/X2XS32.","code":"@Article{,   title = {USE it: uniformly sampling pseudo-absences within the environmental space for applications in habitat suitability models},   author = {Daniele {Da Re} and Enrico Tordoni and Jonathan Lenoir and Jonas Lembrechts and Sophie Vanwambeke and Duccio Rocchini and Manuele Bazzichetto},   journal = {EcoEvoRxiv},   year = {2023},   url = {https://doi.org/10.32942/X2XS32}, }"},{"path":[]},{"path":"~ https://danddr.github.io/USE/index.html","id":"this-is-a-development-repository","dir":"","previous_headings":"","what":"This is a development repository","title":"Uniform Sampling of the Environmental space","text":"forks goal extend enable MCMC sampling higher dimensional spaces.","code":""},{"path":"~ https://danddr.github.io/USE/reference/SpatialProba.html","id":null,"dir":"Reference","previous_headings":"","what":"Virtual species probability of occurrence — SpatialProba","title":"Virtual species probability of occurrence — SpatialProba","text":"SpatialProba  function calculates simulated probability occurrence virtual species based additive model incorporates environmental variables. model considers linear quadratic relationships environmental factors species' probability presence. function uses environmental data provided SpatRaster object (e.g., temperature, precipitation) compute probability species presence across defined area interest. resulting probabilities mapped range 0 1, representing likelihood species occurrence given locations.","code":""},{"path":"~ https://danddr.github.io/USE/reference/SpatialProba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Virtual species probability of occurrence — SpatialProba","text":"","code":"SpatialProba(coefs, env.rast, quadr_term, marginalPlots)"},{"path":"~ https://danddr.github.io/USE/reference/SpatialProba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Virtual species probability of occurrence — SpatialProba","text":"coefs named vector regression parameters. Names must match environmental layers (except intercept, quadratic terms). Parameters quadratic terms must prefix 'quadr_' (e.g., quadr_bio1). env.rast SpatRaster object environmental layers generate spatial layer probabilities. quadr_term named vector names coefs quadratic term specified (without prefix 'quadr_'). marginalPlots logical, TRUE, returns marginal plots.","code":""},{"path":"~ https://danddr.github.io/USE/reference/Worldclim_tmp.html","id":null,"dir":"Reference","previous_headings":"","what":"A subset of WorldClim bioclimatic variables — Worldclim_tmp","title":"A subset of WorldClim bioclimatic variables — Worldclim_tmp","text":"subset WorldClim bioclimatic variables cropped Central Western Europe.","code":""},{"path":"~ https://danddr.github.io/USE/reference/Worldclim_tmp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A subset of WorldClim bioclimatic variables — Worldclim_tmp","text":"","code":"data(Worldclim_tmp)"},{"path":"~ https://danddr.github.io/USE/reference/Worldclim_tmp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A subset of WorldClim bioclimatic variables — Worldclim_tmp","text":"data frame obtained SpatRaster 1080 rows, 2160 columns, 5 layers, namely: wc2.1_10m_bio_4, wc2.1_10m_bio_3, wc2.1_10m_bio_14, wc2.1_10m_bio_9, wc2.1_10m_bio_15.","code":""},{"path":"~ https://danddr.github.io/USE/reference/Worldclim_tmp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A subset of WorldClim bioclimatic variables — Worldclim_tmp","text":"geodata::worldclim_global(var='bio', res=10, path=getwd())[[c(4,  3, 14,  9, 15)]]","code":""},{"path":"~ https://danddr.github.io/USE/reference/acceptNextPoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Accept next point ? — acceptNextPoint","title":"Accept next point ? — acceptNextPoint","text":"acceptNextPoint checks whether proposed point accepted","code":""},{"path":"~ https://danddr.github.io/USE/reference/acceptNextPoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accept next point ? — acceptNextPoint","text":"","code":"acceptNextPoint(current.point, proposed.point, densityFunction)"},{"path":"~ https://danddr.github.io/USE/reference/acceptNextPoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accept next point ? — acceptNextPoint","text":"current.point Current state markov chain, given sf dataframe. proposed.point Proposed next state markov chain, given sf dataframe. densityFunction Function can take point given sf dataframe input returns target density location.","code":""},{"path":"~ https://danddr.github.io/USE/reference/acceptNextPoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accept next point ? — acceptNextPoint","text":"TRUE proposed point accepted","code":""},{"path":"~ https://danddr.github.io/USE/reference/addHighDimGaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"addHighDimGaussian — addHighDimGaussian","title":"addHighDimGaussian — addHighDimGaussian","text":"Adds high dimensional Gaussian noise specific parameters point given dataframe.","code":""},{"path":"~ https://danddr.github.io/USE/reference/addHighDimGaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addHighDimGaussian — addHighDimGaussian","text":"","code":"addHighDimGaussian(   dim = 0,   mean_vec = matrix(0, ncol = dim),   cov_mat = diag(dim) )"},{"path":"~ https://danddr.github.io/USE/reference/addHighDimGaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addHighDimGaussian — addHighDimGaussian","text":"dim integer specifies number dimensions altered mean_vec vector means Gaussian added cov_mat covariance matrix Gaussian added","code":""},{"path":"~ https://danddr.github.io/USE/reference/addHighDimGaussian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"addHighDimGaussian — addHighDimGaussian","text":"function takes point given dataframe input returns gaussian noise added specified dimensions","code":""},{"path":"~ https://danddr.github.io/USE/reference/alwaysOne.html","id":null,"dir":"Reference","previous_headings":"","what":"AlwaysOne — alwaysOne","title":"AlwaysOne — alwaysOne","text":"name implies, function returns always 1, matter input. can used dummy desity function perform uniform sampling higher dimensional space. works Input, can also used placeholder evade errors.","code":""},{"path":"~ https://danddr.github.io/USE/reference/alwaysOne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AlwaysOne — alwaysOne","text":"","code":"alwaysOne(...)"},{"path":"~ https://danddr.github.io/USE/reference/alwaysOne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AlwaysOne — alwaysOne","text":"... input possible, effect","code":""},{"path":"~ https://danddr.github.io/USE/reference/alwaysOne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AlwaysOne — alwaysOne","text":"1, always","code":""},{"path":"~ https://danddr.github.io/USE/reference/alwaysOne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AlwaysOne — alwaysOne","text":"","code":"alwaysOne(stop(\"even this input is fine\")) #> [1] 1"},{"path":"~ https://danddr.github.io/USE/reference/euclidianMetric.html","id":null,"dir":"Reference","previous_headings":"","what":"Euclidean metric on specified columns — euclidianMetric","title":"Euclidean metric on specified columns — euclidianMetric","text":"euclidianMetric calculates euclidean metric specified columns two points given dataframes","code":""},{"path":"~ https://danddr.github.io/USE/reference/euclidianMetric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Euclidean metric on specified columns — euclidianMetric","text":"","code":"euclidianMetric(pointA = NULL, pointB = NULL, dim = \"\")"},{"path":"~ https://danddr.github.io/USE/reference/euclidianMetric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Euclidean metric on specified columns — euclidianMetric","text":"pointA First point pointB Second point dim vector containing names columns included computation","code":""},{"path":"~ https://danddr.github.io/USE/reference/euclidianMetric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Euclidean metric on specified columns — euclidianMetric","text":"euclidean metric two points","code":""},{"path":"~ https://danddr.github.io/USE/reference/highDimGaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"multivariate gaussian random number generator — highDimGaussian","title":"multivariate gaussian random number generator — highDimGaussian","text":"multivariate gaussian random number generator","code":""},{"path":"~ https://danddr.github.io/USE/reference/highDimGaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multivariate gaussian random number generator — highDimGaussian","text":"","code":"highDimGaussian(dim = 1, mean_vec = matrix(1, ncol = dim), cov_mat = diag(dim))"},{"path":"~ https://danddr.github.io/USE/reference/highDimGaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multivariate gaussian random number generator — highDimGaussian","text":"dim number dimensions mean_vec first moment cov_mat second moment","code":""},{"path":"~ https://danddr.github.io/USE/reference/highDimGaussian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multivariate gaussian random number generator — highDimGaussian","text":"function generates samples higher dimensional gaussian","code":""},{"path":"~ https://danddr.github.io/USE/reference/mcmcSampling.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC sampling from a given dataset — mcmcSampling","title":"MCMC sampling from a given dataset — mcmcSampling","text":"MCMC sampling given dataset","code":""},{"path":"~ https://danddr.github.io/USE/reference/mcmcSampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC sampling from a given dataset — mcmcSampling","text":"","code":"mcmcSampling(   dataset = NULL,   dimensions = list(\"\"),   densityFunction = alwaysOne,   proposalFunction = addHighDimGaussian(dim = lengt(dimensions)),   n.sample.points = 0 )"},{"path":"~ https://danddr.github.io/USE/reference/mcmcSampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC sampling from a given dataset — mcmcSampling","text":"dataset sf dataframe points sampled dimensions string vector containing dimensions included random walk densityFunction Function can take point given sf dataframe input returns target density location. proposalFunction Function can take point given sf dataframe vector strings specifying row names changed input returns new proposed point n.sample.points Number points sampled","code":""},{"path":"~ https://danddr.github.io/USE/reference/mcmcSampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC sampling from a given dataset — mcmcSampling","text":"sf dataframe containing sampled points","code":""},{"path":"~ https://danddr.github.io/USE/reference/optimRes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get optimal resolution of the sampling grid — optimRes","title":"Get optimal resolution of the sampling grid — optimRes","text":"optimRes identifies optimal resolution sampling grid used perform uniform environmental sampling. find optimal resolution, set candidate resolutions must provided. candidate resolution, optimRes calculates metric summarizes average squared Euclidean distance observations (PC-scores first two principal components) within cell centroid convex hull encompassing points. important note centroid specific cell.","code":""},{"path":"~ https://danddr.github.io/USE/reference/optimRes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get optimal resolution of the sampling grid — optimRes","text":"","code":"optimRes(sdf, grid.res, perc.thr = 10, cr = 1, showOpt = TRUE)"},{"path":"~ https://danddr.github.io/USE/reference/optimRes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get optimal resolution of the sampling grid — optimRes","text":"sdf sf object point geometry given PC-scores values grid.res (integer) vector resolutions tested, .e seq(1,100, =1) perc.thr rate change (expressed percentage) function minimized selecting optimal resolution. cr (integer) number cores parallel computing. default cluster type PSOCK. showOpt (logical) plot result.","code":""},{"path":"~ https://danddr.github.io/USE/reference/optimRes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get optimal resolution of the sampling grid — optimRes","text":"returns list : ) matrix reporting values function minimized, along corresponding resolution; ii) optimal resolution.","code":""},{"path":"~ https://danddr.github.io/USE/reference/optimRes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get optimal resolution of the sampling grid — optimRes","text":"metric compared across different sampling grids increasing resolution, .e., increasing number cells. best resolution selected based trade-number cells average distance among observations within cell. Essentially, goal find finest resolution sampling grid enables uniform sampling environmental space without overfitting . default, optimal resolution determined one average distance among observations cell-specific centroids reduced 10%. However, users flexibility adjust setting according needs. optimRes function returns list two elements. first element matrix reports metric calculated sampling grid corresponding resolution. second element selected optimal resolution. Additionally, function provides plot displays metric values resolution. allows users visually analyze relationship resolution associated metric, thereby empowering make informed decision selecting resolution. case function returns NA optimal resolution: ) increase range grid.res, ii) increase perc.thr.","code":""},{"path":"~ https://danddr.github.io/USE/reference/paSampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling pseudo-absences for the training and testing datasets. — paSampling","title":"Sampling pseudo-absences for the training and testing datasets. — paSampling","text":"paSampling performs two-step procedure uniformly sampling pseudo-absences within environmental space. initial step, kernel-based filter utilized determine subset environmental space subsequently sampled. kernel-based filter calculates probability function based presence observations, enabling identification areas within environmental space likely exhibit suitable conditions species. achieve , probability threshold value utilized assign observations corresponding portion environmental space. areas, deemed suitable environmental conditions, excluded subsequent uniform sampling process conducted second step using uniformSampling function, internally called. bandwidth kernel can automatically estimated presence observations directly set user, providing flexibility determining scope precision filter.","code":""},{"path":"~ https://danddr.github.io/USE/reference/paSampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling pseudo-absences for the training and testing datasets. — paSampling","text":"","code":"paSampling(   env.rast = NULL,   pres = NULL,   thres = 0.75,   H = NULL,   grid.res = NULL,   n.tr = 5,   sub.ts = FALSE,   n.ts = 5,   prev = NULL,   plot_proc = FALSE,   verbose = FALSE )"},{"path":"~ https://danddr.github.io/USE/reference/paSampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling pseudo-absences for the training and testing datasets. — paSampling","text":"env.rast RasterStack, RasterBrick SpatRaster object comprising variables describing environmental space. pres SpatialPointsDataframe, SpatVector sf object including presence-observations species interest. thres (double) value identifies quantile value used specify boundary kernel density estimate (default thres=0.75 ). Thus, probability values higher threshold indicate portions multivariate space likely associated presence points. H kernel bandwidth (.e., width kernel density function defines shape) excluding portion environmental space associated environmental conditions likely suitable species. can either defined user automatically estimated paSampling via ks::Hpi. grid.res (integer) resolution sampling grid. resolution can arbitrarily selected defined using optimRes function. n.tr (integer) number pseudo-absences training dataset sample cell sampling grid sub.ts (logical) sample validation pseudo-absences n.ts (integer; optional) number pseudo-absences testing dataset sample cell sampling grid. sub.ts argument must TRUE. prev (double) prevalence value specified instead n.tr n.ts plot_proc (logical) plot progress sampling, default FALSE verbose (logical) Print verbose","code":""},{"path":"~ https://danddr.github.io/USE/reference/paSampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling pseudo-absences for the training and testing datasets. — paSampling","text":"sf object coordinates pseudo-absences geographical environmental space.","code":""},{"path":"~ https://danddr.github.io/USE/reference/paSampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling pseudo-absences for the training and testing datasets. — paSampling","text":"designed species distribution models mind, paSampling allows collectively sampling pseudo-absences training testing dataset (optional). cases, user must provide number observations sampled cell sampling grid (n.tr: points training dataset; n.ts: points testing dataset). Note optimal resolution sampling grid can found using optimRes function. Also, note number pseudo-absences eventually sampled cell internally-called uniformSampling function depends spatial configuration observations within environmental space. Indeed, cases cells sampling grid empty (.e., boundary environmental space). reason, number pseudo-absences returned paSampling likely lower product number cells sampling gird n.tr(n.ts).","code":""},{"path":"~ https://danddr.github.io/USE/reference/pca_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict pca — pca_predict","title":"Predict pca — pca_predict","text":"Predict pca","code":""},{"path":"~ https://danddr.github.io/USE/reference/pca_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict pca — pca_predict","text":"","code":"pca_predict(data, model, nPC)"},{"path":"~ https://danddr.github.io/USE/reference/pca_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict pca — pca_predict","text":"data RasterStack, RasterBrick SpatRaster object comprising variables describing environmental space. model princomp object. nPC Integer. Number PCA components return.","code":""},{"path":"~ https://danddr.github.io/USE/reference/plot_points_with_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Plott a dequence of points in 2d — plot_points_with_lines","title":"Plott a dequence of points in 2d — plot_points_with_lines","text":"Plott dequence points 2d","code":""},{"path":"~ https://danddr.github.io/USE/reference/plot_points_with_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plott a dequence of points in 2d — plot_points_with_lines","text":"","code":"plot_points_with_lines(   df,   cols,   limits = NULL,   title = \"Connected Data Points\" )"},{"path":"~ https://danddr.github.io/USE/reference/plot_points_with_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plott a dequence of points in 2d — plot_points_with_lines","text":"df dataframe containing observation cols vector containing names columns plotted limits sets limits plot. usefull ensure comparable plot sizes title title plot","code":""},{"path":"~ https://danddr.github.io/USE/reference/plot_points_with_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plott a dequence of points in 2d — plot_points_with_lines","text":"desired plot","code":""},{"path":"~ https://danddr.github.io/USE/reference/princompCustom.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom version of princomp The warning() at L53 substitutes the stop() in the original version of ","title":"Custom version of princomp The warning() at L53 substitutes the stop() in the original version of ","text":"Custom version princomp warning() L53 substitutes stop() original version \"princomp\". param formula formula response variable, referring numeric variables. param data optional data frame (similar: see model.frame) containing variables formula formula. default variables taken environment(formula).","code":""},{"path":"~ https://danddr.github.io/USE/reference/princompCustom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom version of princomp The warning() at L53 substitutes the stop() in the original version of ","text":"","code":"princompCustom(   x,   cor = FALSE,   scores = TRUE,   covmat = NULL,   subset = rep_len(TRUE, nrow(as.matrix(x))),   fix_sign = TRUE,   ... )"},{"path":"~ https://danddr.github.io/USE/reference/princompCustom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom version of princomp The warning() at L53 substitutes the stop() in the original version of ","text":"x numeric matrix data frame provides data principal components analysis. cor logical value indicating whether calculation use correlation matrix covariance matrix. (correlation matrix can used constant variables.) scores logical value indicating whether score principal component calculated. covmat covariance matrix, covariance list returned cov.wt (cov.mve cov.mcd package MASS). supplied, used rather covariance matrix x. subset optional vector used select rows (observations) data matrix x. param na.action function indicates happen data contain NAs. default set na.action setting options, na.fail unset. ‘factory-fresh’ default na.omit. fix_sign signs loadings scores chosen first element loading non-negative? param object Object class inheriting \"princomp\". param newdata optional data frame matrix look variables predict. omitted, scores used. original fit used formula data frame matrix column names, newdata must contain columns names. Otherwise must contain number columns, used order.","code":""},{"path":"~ https://danddr.github.io/USE/reference/rastPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Component Analysis for Rasters — rastPCA","title":"Principal Component Analysis for Rasters — rastPCA","text":"rastPCA function calculates principal component analysis  (PCA) SpatRaster, RasterBrick, RasterStack objects returns SpatRaster multiple layers representing PCA components. Internally, rastPCA utilizes princomp function R-mode PCA analysis. covariance matrix computed using observations within provided SpatRaster object, describes environmental conditions. covariance matrix obtained subsequently utilized input princomp function, conducts PCA. resulting PCA components used generate final SpatRaster, consisting multiple layers represent PCA components.","code":""},{"path":"~ https://danddr.github.io/USE/reference/rastPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Component Analysis for Rasters — rastPCA","text":"","code":"rastPCA(env.rast, nPC = NULL, naMask = TRUE, stand = FALSE)"},{"path":"~ https://danddr.github.io/USE/reference/rastPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Component Analysis for Rasters — rastPCA","text":"env.rast RasterStack, RasterBrick SpatRaster object comprising variables describing environmental space. nPC Integer. Number PCA components return. naMask Logical. Masks pixels least one NA (default TRUE recommended introduces slow-. stand Logical. TRUE, perform standardized PCA. Corresponds centered scaled input image. usually beneficial equal weighting layers. (FALSE default)","code":""},{"path":"~ https://danddr.github.io/USE/reference/rastPCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal Component Analysis for Rasters — rastPCA","text":"Returns named list containing PCA model object ($pca) SpatRaster principal component layers ($PCs).","code":""},{"path":"~ https://danddr.github.io/USE/reference/rastPCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Principal Component Analysis for Rasters — rastPCA","text":"Pixels missing values one bands set NA. built-check pixels can lead slow-rastPCA. However, make sure know beforehand pixels either valid values NAs throughout layers can disable check setting naMask=FALSE speeds computation. Standardized PCA (stand=TRUE) can useful imagery bands different dynamic ranges combined. case, correlation matrix computed instead covariance matrix, effect using normalised bands unit variance.","code":""},{"path":[]},{"path":"~ https://danddr.github.io/USE/reference/thresh.inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect the effect of the kernel threshold parameter on the environmental space partitioning — thresh.inspect","title":"Inspect the effect of the kernel threshold parameter on the environmental space partitioning — thresh.inspect","text":"thresh.inspect function allows pre-inspection impact selecting specific threshold kernel-based filter exclusion environmental space subsequent uniform sampling pseudo-absences process (see paSampling). providing range threshold values, function generates plot illustrates entire environmental space, including portion delineated kernel-based filter associated convex-hull. plot helps visualize areas excluded uniform sampling pseudo-absences. functionality proves particularly valuable determining meaningful threshold kernel-based filter specific ecological scenarios. instance, dealing sink populations, selecting appropriate threshold enables exclusion environmental space regions species present, conditions unsuitable. allows accurate sampling pseudo-absences, considering unique requirements different ecological contexts.","code":""},{"path":"~ https://danddr.github.io/USE/reference/thresh.inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect the effect of the kernel threshold parameter on the environmental space partitioning — thresh.inspect","text":"","code":"thresh.inspect(env.rast, pres = NULL, thres = 0.75, H = NULL)"},{"path":"~ https://danddr.github.io/USE/reference/thresh.inspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect the effect of the kernel threshold parameter on the environmental space partitioning — thresh.inspect","text":"env.rast RasterStack, RasterBrick SpatRaster object comprising variables describing environmental space. pres SpatialPointsDataframe, SpatVector sf object including presence-observations species interest. thres (double) value vector values identifies quantile value used specify boundary kernel density estimate (default thres=0.75 ). Thus, probability values higher threshold indicate portions multivariate space likely associated presence points. H kernel bandwidth (.e., width kernel density function defines shape) excluding portion environmental space associated environmental conditions likely suitable species. can either defined user automatically estimated paSampling via ks::Hpi.","code":""},{"path":"~ https://danddr.github.io/USE/reference/thresh.inspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect the effect of the kernel threshold parameter on the environmental space partitioning — thresh.inspect","text":"ggplot2 object showing environmental space partitioned accordingly selected thres values.","code":""},{"path":"~ https://danddr.github.io/USE/reference/uniformSampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniform sampling of the environmental space — uniformSampling","title":"Uniform sampling of the environmental space — uniformSampling","text":"uniformSampling performs uniform sampling observations within environmental space. Note uniformSampling can generally used sample observations (necessarily associated species occurrence data) within bi-dimensional spaces (e.g., vegetation plots). designed species distribution models mind, uniformSampling allows collectively sampling observations training testing dataset (optional). cases, user must provide number observations sampled cell sampling grid (n.tr: points training dataset; n.ts: points testing dataset). Note optimal resolution sampling grid can found using optimRes function.","code":""},{"path":"~ https://danddr.github.io/USE/reference/uniformSampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniform sampling of the environmental space — uniformSampling","text":"","code":"uniformSampling(   sdf,   grid.res,   n.tr = 5,   n.prev = NULL,   sub.ts = FALSE,   n.ts = 5,   plot_proc = FALSE,   verbose = FALSE )"},{"path":"~ https://danddr.github.io/USE/reference/uniformSampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniform sampling of the environmental space — uniformSampling","text":"sdf sf object point geometry given PC-scores values grid.res (integer) resolution sampling grid. resolution can arbitrarily selected defined using optimRes() function. n.tr (integer; optional) number expected points given certain prevalence threshold training dataset. n.prev (double) sample prevalence sub.ts (logical) sample validation points n.ts (integer; optional) number  points testing dataset sample cell sampling grid. sub.ts argument must TRUE. plot_proc (logical) plot progress sampling verbose (logical) Print verbose","code":""},{"path":"~ https://danddr.github.io/USE/reference/uniformSampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniform sampling of the environmental space — uniformSampling","text":"sf object coordinates sampled points geographical environmental space","code":""}]
