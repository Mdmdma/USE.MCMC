theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
st_as_stars(Meanpred)
Meanpred<-st_as_stars(Meanpred)
ggplot()+
geom_stars(data=Meanpred)+
geom_sf(data=myPres, aes(col=as.factor(Observed)),  size=0.5)+
scale_fill_viridis(option="viridis", limits = c(0, 1),
oob = scales::squish, na.value="transparent")+
scale_color_manual(values=c("0"="white", "1"="black"))+
labs(x="Longitude",y="Latitude", fill="HSI", col="PA")+
theme_classic()+
facet_wrap(~band)+
coord_sf()+
theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
ggplot()+
geom_stars(data=Meanpred)+
geom_sf(data=myPres, aes(col=as.factor(Observed)),  size=0.5)+
scale_fill_viridis(option="viridis", limits = c(0, 1),
oob = scales::squish, na.value="transparent")+
scale_color_manual(values=c("0"="white", "1"="black"))+
labs(x="Longitude",y="Latitude", fill="HSI", col="PA")+
theme_classic()+
facet_wrap(~band)+
# coord_sf()+
theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
myPres
percTesting <- 30
Nreps <- 5
myCores <- 5
# myPres <- sf::as_Spatial(myPres)
#modelling
library(sdm)
library(parallel)
# extract enviromental data
d <- sdmData(formula=Observed~., train=myPres, predictors=envData)
#model
m1 <- sdm(Observed~.,
data=d,
methods=c('glm', 'rf' ),
replication='sub',
test.percent=percTesting,
n=Nreps,
parallelSettings=list("parallel", ncore=myCores))
sf::st_as_sf(myPres)
ggplot()+
geom_stars(data=Meanpred)+
geom_sf(data=sf::st_as_sf(myPres), aes(col=as.factor(Observed)),  size=0.5)+
scale_fill_viridis(option="viridis", limits = c(0, 1),
oob = scales::squish, na.value="transparent")+
scale_color_manual(values=c("0"="white", "1"="black"))+
labs(x="Longitude",y="Latitude", fill="HSI", col="PA")+
theme_classic()+
facet_wrap(~band)+
# coord_sf()+
theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
ggplot()+
geom_stars(data=Meanpred)+
geom_sf(data=sf::st_as_sf(myPres), aes(col=as.factor(Observed)),  size=0.5)+
scale_fill_viridis(option="viridis", limits = c(0, 1),
oob = scales::squish, na.value="transparent")+
scale_color_manual(values=c("0"="white", "1"="black"))+
labs(x="Longitude",y="Latitude", fill="HSI", col="PA")+
theme_classic()+
facet_wrap(~band)+
# coord_sf()+
theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
#average the prediction to plot
Meanpred <- raster::stack(new.pres$probability.of.occurrence,
raster::calc(m1.Allpreds[[1:5]], mean),
raster::calc(m1.Allpreds[[5:10]], mean))
names(Meanpred)<-c("VS.suit", "GLM.sdm.mean", "RF.sdm.mean")
Meanpred$ensemble<-e1
ggplot()+
geom_stars(data=st_as_stars(Meanpred))+
geom_sf(data=sf::st_as_sf(myPres), aes(col=as.factor(Observed)),  size=0.5)+
scale_fill_viridis(option="viridis", limits = c(0, 1),
oob = scales::squish, na.value="transparent")+
scale_color_manual(values=c("0"="white", "1"="black"))+
labs(x="Longitude",y="Latitude", fill="HSI", col="PA")+
theme_classic()+
facet_wrap(~band)+
# coord_sf()+
theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
ggplot()+
geom_stars(data=st_as_stars(Meanpred))+
geom_sf(data=sf::st_as_sf(myPres), aes(col=as.factor(Observed)),  size=0.5)+
scale_fill_viridis(option="viridis", limits = c(0, 1),
oob = scales::squish, na.value="transparent")+
scale_color_manual(values=c("0"="white", "1"="black"))+
labs(x="Longitude",y="Latitude", fill="HSI", col="PA")+
theme_classic()+
facet_wrap(~band)+
theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
myStar<-raster::stack(new.pres$suitab.raster, pred.GLM, pred.RF )
names(myStar)<-c("Observed", "predGLM", "predRF")
myStar
myStar<-st_as_stars(myStar)
ggplot()+
geom_stars(data=myStar)+
geom_sf(data=myPres, aes(col=as.factor(Observed)),  size=0.5)+
scale_fill_viridis(option="viridis", limits = c(0, 1),
oob = scales::squish, na.value="transparent")+
scale_color_manual(values=c("0"="white", "1"="black"))+
labs(x="Longitude",y="Latitude", fill="HSI", col="PA")+
theme_classic()+
facet_wrap(~band, ncol=3, labeller = labeller(band = band.labs))+
coord_sf()+
theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
ggplot()+
geom_stars(data=myStar)+
geom_sf(data=st_as_sf(myPres), aes(col=as.factor(Observed)),  size=0.5)+
scale_fill_viridis(option="viridis", limits = c(0, 1),
oob = scales::squish, na.value="transparent")+
scale_color_manual(values=c("0"="white", "1"="black"))+
labs(x="Longitude",y="Latitude", fill="HSI", col="PA")+
theme_classic()+
facet_wrap(~band, ncol=3, labeller = labeller(band = band.labs))+
coord_sf()+
theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
myStar
myStar<-raster::stack(new.pres$suitab.raster, pred.GLM, pred.RF )
myStar<-raster::stack(new.pres$probability.of.occurrence, pred.GLM, pred.RF )
names(myStar)<-c("Observed", "predGLM", "predRF")
myStar<-st_as_stars(myStar)
myStar<-raster::stack(new.pres$probability.of.occurrence, pred.GLM, pred.RF )
names(myStar)<-c("Observed", "predGLM", "predRF")
myStar
myStar<-st_as_stars(myStar)
ggplot()+
geom_stars(data=myStar)+
geom_sf(data=st_as_sf(myPres), aes(col=as.factor(Observed)),  size=0.5)+
scale_fill_viridis(option="viridis", limits = c(0, 1),
oob = scales::squish, na.value="transparent")+
scale_color_manual(values=c("0"="white", "1"="black"))+
labs(x="Longitude",y="Latitude", fill="HSI", col="PA")+
theme_classic()+
facet_wrap(~band, ncol=3, labeller = labeller(band = band.labs))+
coord_sf()+
theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
ggplot()+
geom_stars(data=myStar)+
geom_sf(data=st_as_sf(myPres), aes(col=as.factor(Observed)),  size=0.5)+
scale_fill_viridis(option="viridis", limits = c(0, 1),
oob = scales::squish, na.value="transparent")+
scale_color_manual(values=c("0"="white", "1"="black"))+
labs(x="Longitude",y="Latitude", fill="HSI", col="PA")+
theme_classic()+
facet_wrap(~band, ncol=3)+
coord_sf()+
theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
Meanpred$predGLM<-pred.GLM
Meanpred$predRF<-pred.RF
ggplot()+
geom_stars(data=st_as_stars(Meanpred))+
geom_sf(data=sf::st_as_sf(myPres), aes(col=as.factor(Observed)),  size=0.5)+
scale_fill_viridis(option="viridis", limits = c(0, 1),
oob = scales::squish, na.value="transparent")+
scale_color_manual(values=c("0"="white", "1"="black"))+
labs(x="Longitude",y="Latitude", fill="HSI", col="PA")+
theme_classic()+
facet_wrap(~band)+
theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
ggplot()+
geom_stars(data=st_as_stars(Meanpred))+
geom_sf(data=sf::st_as_sf(myPres), aes(col=as.factor(Observed)),  size=0.5)+
scale_fill_viridis(option="viridis", limits = c(0, 1),
oob = scales::squish, na.value="transparent")+
scale_color_manual(values=c("0"="white", "1"="black"))+
labs(x="Longitude",y="Latitude", fill="HSI", col="PA")+
theme_classic()+
facet_wrap(~band)+
theme(legend.position = "bottom",  text = element_text(size=14))+
guides(fill = guide_colourbar(title.position="top",
title.hjust = 0.5,
barwidth = 20,
barheight = 0.8),
size = guide_legend(title.position="top",
title.hjust = 0.5))
Meanpred
Meanpred[[2:nlayers(Meanpred)]]
# compute cor and rmse with the observed distribution
sp.preds <- na.omit(raster::as.data.frame(raster::stack(Meanpred$VS.suit, Meanpred[[2:nlayers(Meanpred)]])))
rmse.distribution <- apply(sp.preds[,2:ncol(sp.preds)], 2, function(x){round(Metrics::rmse(sp.preds$layer,x),3)})
cor.distribution <- apply(sp.preds[,2:ncol(sp.preds)], 2, function(x){round(cor(sp.preds$layer,x),3)})
# compute cor and rmse with the observed distribution
sp.preds <- na.omit(raster::as.data.frame(raster::stack(Meanpred$VS.suit, Meanpred[[2:nlayers(Meanpred)]])))
sp.preds
sp.preds
rmse.distribution <- apply(sp.preds[,2:ncol(sp.preds)], 2, function(x){round(Metrics::rmse(sp.preds$layer,x),3)})
rmse.distribution
sp.preds
rmse.distribution <- apply(sp.preds[,2:ncol(sp.preds)], 2, function(x){round(Metrics::rmse(sp.preds$VS.suit, x),3)})
rmse.distribution
cor.distribution <- apply(sp.preds[,2:ncol(sp.preds)], 2, function(x){round(cor(sp.preds$VS.suit,x),3)})
rmse.distribution <- data.frame(ModelType=attributes(rmse.distribution)$names,
rmse.distribution=rmse.distribution,
cor.distribution=cor.distribution)
rmse.distribution$ModelType <- gsub(sapply(rmse.distribution$ModelType, function(x){strsplit(x, "_")[[1]][[4]]}),
pattern=".re", replacement = "")
rmse.distribution
rmse.distribution
rmse.distribution <- rmse.distribution %>%
group_by(ModelType) %>%
summarise(rmse.distribution=mean(rmse.distribution, na.rm=TRUE),
cor.distribution=mean(cor.distribution, na.rm=TRUE)) %>%
mutate(ModelType=toupper(ModelType))
rmse.distribution
rmse.distribution
# compute cor and rmse with the observed distribution
sp.preds <- na.omit(raster::as.data.frame(raster::stack(Meanpred$VS.suit, Meanpred[[2:nlayers(Meanpred)]])))
rmse.distribution <- apply(sp.preds[,2:ncol(sp.preds)], 2, function(x){round(Metrics::rmse(sp.preds$VS.suit, x),3)})
cor.distribution <- apply(sp.preds[,2:ncol(sp.preds)], 2, function(x){round(cor(sp.preds$VS.suit,x),3)})
rmse.distribution <- data.frame(ModelType=attributes(rmse.distribution)$names,
rmse.distribution=rmse.distribution,
cor.distribution=cor.distribution)
rmse.distribution
rmse.distribution
kable(rmse.distribution, align="c")
names(rmse.distribution)<-c("Model", "RMSE.geo", "COR.geo")
kable(rmse.distribution, align="c")
myPres
percTesting <- 30
Nreps <- 5
myCores <- 5
myPres <- sf::as_Spatial(myPres)
myPres <- sf::as_Spatial(myPres)
myPres <- as(myPres, "Spatial")
myPres
myPres
myPres <- presence.points$sample.points[, c( "x", "y",  "Observed")]
table(myPres$Observed)
myPres <- sf::st_as_sf(myPres, coords=c("x", "y"), crs=4326)
as_Spatial(myPres)
myPres
![fig](ModelProcess.png)
library(rpart)
library(rms)
library(ranger)
library(kernlab)
library(mboost)
library(landmap)
library(mlr)
library(forestError)
rmse <- function(a, b) {
sqrt(mean((a - b)^2))
}
## Synthetic data ----
set.seed(200)
n = 100
x <- 1:n
y <- x + rnorm(n = 50, mean = 15, sd = 15)
plot(x, y)
## Synthetic linear model ----
m0 <- lm(y ~ x)
summary(m0)
rmse(m0$fitted.values, y)
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)
# (Intercept) 14.84655    2.37953   6.239 1.12e-08 ***
#   x            0.97910    0.04091  23.934  < 2e-16 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 11.81 on 98 degrees of freedom
# Multiple R-squared:  0.8539,	Adjusted R-squared:  0.8524
# F-statistic: 572.9 on 1 and 98 DF,  p-value: < 2.2e-16
dat <- data.frame(x,y)
## newdata:
newdata <- data.frame(
x = -100:200
)
newdata$y.lm <- predict(m0, newdata = newdata)
## Synthetic RF ----
rf = randomForest::randomForest(data.frame(x=x), y, nodesize = 5, ntree = 100, keep.inbag = TRUE)
rf
rmse(rf$predicted, y)
rmse( y, rf$predicted)
~quantiles = c((1-.682)/2, 1-(1-.682)/2)
quantiles = c((1-.682)/2, 1-(1-.682)/2)
quantiles
## prediction error from forestError:
pr.rf = forestError::quantForestError(rf, X.train=data.frame(x=x), X.test=data.frame(x = -100:200), Y.train=y, alpha = (1-(quantiles[2]-quantiles[1])))
newdata$y.rf <- predict(rf, newdata = newdata)
newdata
quantiles
?quantForestError
pr.rf
## prediction error from forestError:
pr.rf = forestError::quantForestError(rf, X.train=data.frame(x=x), X.test=data.frame(x = -100:200), Y.train=y, alpha = (1-(quantiles[2]-quantiles[1])))
pr.rf
pr.rf$estimates
plot(y, pr.rf$estimates$pred)
plot(-100:200, pr.rf$estimates$pred)
## RMSE
rmse.lm <- round(rmse(y, predict(m0)), 1)
rmse.rf <- round(rmse(y, predict(rf)), 1)
leg.txt <- sprintf("%s (%s)", c('lm', 'RF'), c(rmse.lm, rmse.rf))
par(mar = c(0, 0, 0, 0), fg = 'black', bg = 'white')
plot(y ~ x, xlim = c(-25, 125), ylim = c(-50, 150), type = 'n', axes = FALSE)
grid()
points(y ~ x, cex = 1, pch = 16, las = 1)
lines(y.lm ~ x, data = newdata, col = 2, lwd = 2)
lines(y.rf ~ x, data = newdata, col = 4, lwd = 2)
lines(newdata$x, pr.rf$estimates$lower_0.318, lty=2,col=4)
lines(newdata$x, pr.rf$estimates$upper_0.318, lty=2,col=4)
plot(-x, pr.rf$estimates$pred)
plot(x, pr.rf$estimates$pred)
str(pr.rf)
## Fir Ensemble ML using mlr ----
SL.library = c("regr.ranger", "regr.glm", "regr.gamboost", "regr.ksvm")
SL.library
lrns <- lapply(SL.library, mlr::makeLearner)
lrns
tsk <- mlr::makeRegrTask(data = dat, target = "y")
init.m <- mlr::makeStackedLearner(lrns, method = "stack.cv",
super.learner = "regr.lm",
resampling=mlr::makeResampleDesc(method = "CV"))
init.m
eml = train(init.m, tsk)
eml
summary(eml$learner.model$super.model$learner.model)
str(eml)
eml$learner$super.learner
eml$learner$base.learners
eml$learner.model$super.model
eml$learner.model$super.model$learner.model
summary(eml$learner.model$super.model$learner.model)
## Synthetic prediction error ----
m.train = eml$learner.model$super.model$learner.model
m.terms = eml$learner.model$super.model$learner.model$terms
m.terms
## Synthetic prediction error ----
m.train = eml$learner.model$super.model$learner.model
m.terms = eml$learner.model$super.model$learner.model$terms
newdata$y.eml = predict(eml, newdata = newdata)$data$response
newdata
head(newdata)
plot(newdata$x, newdata$y.eml)
## Synthetic prediction error ----
m.train = eml$learner.model$super.model$learner.model
m.terms = eml$learner.model$super.model$learner.model$terms
newdata$y.eml = predict(eml, newdata = newdata)$data$response
eml.MSE0 = matrixStats::rowSds(as.matrix(m.train$model[,all.vars(m.terms)[-1]]), na.rm=TRUE)^2
eml.MSE = deviance(m.train)/df.residual(m.train)
eml.MSE
## correction factor / mass-preservation of MSE
eml.cf = eml.MSE/mean(eml.MSE0, na.rm = TRUE)
eml.cf
pred = mlr::getStackedBaseLearnerPredictions(eml, newdata=data.frame(x = -100:200))
rf.sd = sqrt(matrixStats::rowSds(as.matrix(as.data.frame(pred)), na.rm=TRUE)^2 * eml.cf)
rmse.eml <- round(sqrt(eml.MSE), 1)
## Plot confidence interval:
leg.txt <- sprintf("%s (%s)", c('lm', 'EML'), c(rmse.lm, rmse.eml))
par(mar = c(0, 0, 0, 0), fg = 'black', bg = 'white')
plot(y ~ x, xlim = c(-25, 125), ylim = c(-50, 150), type = 'n', axes = FALSE)
grid()
points(y ~ x, cex = 1, pch = 16, las = 1)
lines(y.lm ~ x, data = newdata, col = 2, lwd = 2)
lines(y.eml ~ x, data = newdata, col = 4, lwd = 2)
lines(newdata$x, newdata$y.eml+rmse.eml+rf.sd, lty=2, col=4)
lines(newdata$x, newdata$y.eml-(rmse.eml+rf.sd), lty=2, col=4)
legend('bottom', legend = leg.txt, lwd = 2, lty = 1, col = c(2, 4, 3), horiz = TRUE, title = 'RMSE')
car::vif(eml$learner.model$super.model$learner.model)
## Meuse data set ----
library(rgdal)
demo(meuse, echo=FALSE)
plot(meuse.grid["dist"])
points(meuse, pch=20, col="white")
dev.off()
# select learners
SL2.library = c("regr.ranger", "regr.cubist", "regr.gamboost")
meuse.lrns <- lapply(SL2.library, mlr::makeLearner)
# select learners
SL2.library = c("regr.ranger", "regr.cubist", "regr.gamboost")
meuse.lrns <- lapply(SL2.library, mlr::makeLearner)
install.packages("Cubist")
# select learners
SL2.library = c("regr.ranger", "regr.cubist", "regr.gamboost")
meuse.lrns <- lapply(SL2.library, mlr::makeLearner)
meuse.dat = meuse@data[,c("zinc","dist")]
meuse.tsk <- mlr::makeRegrTask(data = meuse.dat, target = "zinc")
meuse.init.m <- mlr::makeStackedLearner(meuse.lrns, method = "stack.cv", super.learner = "regr.lm", resampling=mlr::makeResampleDesc(method = "CV"))
eml.m <- train(meuse.init.m, meuse.tsk)
summary(eml.m$learner.model$super.model$learner.model)
## compare with linear model:
lm.m0 <- lm(zinc ~ dist, meuse@data)
summary(lm.m0)
## R-square 0.41
rmse2.lm <- round(rmse(meuse$zinc, predict(lm.m0)), 1)
## Meuse prediction errors ----
meuse.train = eml.m$learner.model$super.model$learner.model
meuse.terms = eml.m$learner.model$super.model$learner.model$terms
summary(meuse$dist)
m.newdata = data.frame(dist=(0:120)/100)
m.newdata$y.eml = predict(eml.m, newdata = m.newdata)$data$response
m.eml.MSE0 = matrixStats::rowSds(as.matrix(meuse.train$model[,all.vars(meuse.terms)[-1]]), na.rm=TRUE)^2
m.eml.MSE = deviance(meuse.train)/df.residual(meuse.train)
m.eml.MSE
## correction factor / mass-preservation of MSE
m.eml.cf = m.eml.MSE/mean(m.eml.MSE0, na.rm = TRUE)
m.eml.cf
m.pred = mlr::getStackedBaseLearnerPredictions(eml.m, newdata=m.newdata)
m.rf.sd = sqrt(matrixStats::rowSds(as.matrix(as.data.frame(m.pred)), na.rm=TRUE)^2 * m.eml.cf)
m.rmse.eml <- round(sqrt(m.eml.MSE), 1)
## Plot confidence interval:
leg.txt <- sprintf("%s (%s)", c('lm', 'EML'), c(rmse2.lm, m.rmse.eml))
par(fg = 'black', bg = 'white') ## mar = c(0, 0, 0, 0)
plot(zinc ~ dist, meuse@data, xlim = c(0, 1.2), ylim = c(100, 1950)) #type = 'n'
grid()
points(zinc ~ dist, meuse@data, cex = 1, pch = 16, las = 1)
#lines(y.lm ~ dist, data = m.newdata, col = 2, lwd = 2)
lines(y.eml ~ dist, data = m.newdata, col = 4, lwd = 2)
lines(m.newdata$dist, m.newdata$y.eml+m.rmse.eml+m.rf.sd, lty=2, col=4)
lines(m.newdata$dist, m.newdata$y.eml-(m.rmse.eml+m.rf.sd), lty=2, col=4)
legend('top', legend = leg.txt, lwd = 2, lty = 1, col = c(2, 4, 3), horiz = TRUE, title = 'RMSE')
#lines(y.lm ~ dist, data = m.newdata, col = 2, lwd = 2)
lines(y.eml ~ dist, data = m.newdata, col = 4, lwd = 2)
lines(y.lm ~ dist, data = m.newdata, col = 2, lwd = 2)
predict(lm.m0)
lines(y.lm ~ dist, data = m.newdata, col = 2, lwd = 2)
car::vif(eml.m$learner.model$super.model$learner.model)
car::marginalModelPlots(eml.m$learner.model$super.model$learner.model)
car::residualPlots(eml.m$learner.model$super.model$learner.model)
car::vif(eml.m$learner.model$super.model$learner.model)
car::marginalModelPlots(eml.m$learner.model$super.model$learner.model)
car::residualPlots(eml.m$learner.model$super.model$learner.model)
car::vif(eml.m$learner.model$super.model$learner.model)
car::marginalModelPlots(eml.m$learner.model$super.model$learner.model)
??circles
library(modEvA)
#------USE-----------------
setwd("/home/ddare/GitHub/USE/")
# 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
# token
library(devtools)
library(roxygen2)
library(usethat)
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
