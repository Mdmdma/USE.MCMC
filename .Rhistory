invisible(lapply(dimensions, function(col) hist(real.sampled.points[[col]], main=paste("Histogram of sampled points", col))))
par(mfrow = c(3, length(dimensions)))
invisible(lapply(dimensions, function(col) plot(density(env.with.pc.fs[[col]]), main=paste("Density of environment", col))))
invisible(lapply(dimensions, function(col) plot(density(virtual.presence.points.pc[[col]]), main=paste("Density of virtual presence", col))))
invisible(lapply(dimensions, function(col) plot(density(real.sampled.points[[col]]), main=paste("Density of sampled points", col))))
par(mfrow = c(1, 1))
load_all()
load_all()
document()
document()
load_all()
plot.points.with.lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("sampled points with coveariance", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
plotPointsWithLines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("sampled points with coveariance", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
traceback()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
verson()
version)
version()
stopCluster(cl)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
library(mathisRhelpers)
gm()
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
source("~/Desktop/semesterarbeit10/USE.MCMC/R/plotWithLines.R", echo=TRUE)
rm(plotPointsWithLines())
rm(plotPointsWithLines)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
library(devtools)
check()
document()
document()
check()
vcheck()
library(mathisRhelpers)
vcheck()
install()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
document()
library(devtools)
document()
install()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
document()
install
install()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
environment(proposalFunction)
str(proposalFunction)
env <- environment(proposalFunction)
ls(env)
mget("cov.mat", envir = env)
mget("cov.mat", envir = env) /2
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
library(devtools)
load_all()
plotDensity2dpro(dataset =  real.sampled.points, species = virtual.presence.points.pc, xlim = c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), ylim =c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2)),
densityFunction = densityFunction, resolution = 100)
load_all()
load_all()
plotDensity2dpro(dataset =  real.sampled.points, species = virtual.presence.points.pc, xlim = c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), ylim =c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2)),
densityFunction = densityFunction, resolution = 100)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
traceback
traceback()
traceback()
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
traceback()
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
proposalFunction <- addHighDimGaussian(cov.mat =covariance.proposal.function * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
force(cov.mat)
force(x)
force(point)
force(cov.mat)
force(dim)
force(cov.mat)
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
force(dim)
force(point)
force(cov.mat)
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
proposalFunction <- addHighDimGaussian(cov.mat =covariance.proposal.function * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
force(covariance.adjuster)
force(dim)
force(point)
proposalFunction <- addHighDimGaussian(cov.mat =covariance.proposal.function * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# setup environment to compute in parallel
num_cores <- detectCores() - 1
cl <- makeCluster(num_cores)
max.distance <- 2
clusterExport(cl, c("mapBackOnRealPoints", "env.with.pc.fs", "dimensions", "max.distance"))
# map back onto real points
real.sampled.points.list <- parallel::parApply(cl, sampled.points, 1, function(point) mapBackOnRealPoints(env.with.pc.fs, point, dimensions, threshold = max.distance))
stopCluster(cl)
cat(sum(is.na(real.sampled.points.list)) ,"points have no real counterpart in the environment space, given a maximal distance of ", max.distance, "!")
real.sampled.points.list.clean <- real.sampled.points.list[!is.na(real.sampled.points.list)]
real.sampled.points <- do.call(rbind, real.sampled.points.list.clean)
#plot
par(mfrow = c(2, 2))
plotPointsWithLines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("sampled points with coveariance", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
plotPointsWithLines(real.sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
plot(env.with.pc.fs$PC1, env.with.pc.fs$PC2, main = "Environment")
plot(virtual.presence.points.pc$PC1, virtual.presence.points.pc$PC2, xlim = c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)),
ylim = c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2)), main = " Virtual prescence points" )
par(mfrow = c(3, length(dimensions)))
?detectCores
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
load_al
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
load_all()
load_al
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# # set sampling parameters
covariance.proposal.function <-0.5
proposalFunction <- addHighDimGaussian(cov.mat =covariance.proposal.function * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
plotPointsWithLines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("sampled points with coveariance", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
.
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
mvtnorm::rmvnorm(1, mean =1.3, sigma = 0.1)
mvtnorm::rmvnorm(1,1,1)
mvtnorm::rmvnorm(1, mean = mean.vec, sigma = covariance.adjuster * cov.mat)
mvtnorm::rmvnorm(1, mean = mean.vec, sigma =  cov.mat)
mvtnorm::rmvnorm(1, mean = 1, sigma =  1)
mvtnorm::rmvnorm(1, mean = 1, sigma =  2)
mvtnorm::rmvnorm(1, mean = 4, sigma =  2)
mvtnorm::rmvnorm(1, mean = 4, sigma =  2)
library(mathisRhelpers)
gm()
citeation(UseMethod)
library(USE.MCMC)
citation("USE.MCMC")
load_all()
# Load required libraries
library(USE.MCMC)
library(terra)
library(virtualspecies)
library(sf)
library(ggplot2)
library(parallel)
#Nedded for plotting
par(mfrow = c(1, 1))
# load data
env.data.raster <- USE.MCMC::Worldclim_tmp %>%
terra::rast( type="xyz")
# convert to SF dataframe
env.data.sf <- env.data.raster %>%
as.data.frame(xy = TRUE) %>%
sf::st_as_sf(coords = c("x", "y"))
# fixing the
set.seed(42)
# Generate the environmental space using PCA
rpc <- rastPCA(env.data.raster,  stand = TRUE)
# Attaching the data in the PCA coordinates
env.with.pc.fs <- rpc$PCs %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(env.data.sf)
# subsample env space to speed up the process
env.with.pc.fs <- env.with.pc.fs[runif(nrow(env.with.pc.fs)/10, 1, nrow(env.with.pc.fs)),]
#specify the dimension that should be included in the following analysys
dimensions <- c("PC1", "PC2") #, "PC3", "PC4","PC5"
# clean data
env.data.cleaned <- sf::st_drop_geometry(env.with.pc.fs[dimensions])
# environment model
environmental.data.model <- mclust::densityMclust(env.data.cleaned, plot = TRUE)
summary(environmental.data.model)
environmental.densities <- mclust::predict.densityMclust(environmental.data.model, env.data.cleaned)
environment.threshold <- stats::quantile(environmental.densities, 0.05)
# sample species model
virtual.presence.data <- getVirtualSpeciesPresencePoints(env.data = env.data.raster, n.samples = 300)
virtual.presence.points <- virtual.presence.data$sample.points
virtual.presence.points.pc <- terra::extract(rpc$PCs, virtual.presence.points, bind = TRUE) %>%
sf::st_as_sf()
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.presence.points.pc[dimensions]), plot = TRUE)
summary(species.model)
#density Function
densityFunction <- mclustDensityFunction(env.model = environmental.data.model, presence.model = species.model,
dim = dimensions, threshold = environment.threshold)
# # set sampling parameters
covariance.proposal.function <-0.5
proposalFunction <- addHighDimGaussian(cov.mat =covariance.proposal.function * diag(length(dimensions)), dim = length(dimensions))
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/plot_environment.R", echo=TRUE)
View(env.with.pc.fs)
env.with.pc.fs$density <- mclust::predict.densityMclust(environmental.data.model, env.data.cleaned)
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Spatial Plot by Density",
color = "Density")
# subsample env space to speed up the process
env.with.pc.fs <- env.with.pc.fs[runif(nrow(env.with.pc.fs), 1, nrow(env.with.pc.fs)),]
#specify the dimension that should be included in the following analysys
dimensions <- c("PC1", "PC2") #, "PC3", "PC4","PC5"
# clean data
env.data.cleaned <- sf::st_drop_geometry(env.with.pc.fs[dimensions])
# environment model
environmental.data.model <- mclust::densityMclust(env.data.cleaned, plot = TRUE)
summary(environmental.data.model)
env.with.pc.fs$density <- mclust::predict.densityMclust(environmental.data.model, env.data.cleaned)
environment.threshold <- stats::quantile(environmental.densities, 0.05)
# sample species model
virtual.presence.data <- getVirtualSpeciesPresencePoints(env.data = env.data.raster, n.samples = 300)
virtual.presence.points <- virtual.presence.data$sample.points
virtual.presence.points.pc <- terra::extract(rpc$PCs, virtual.presence.points, bind = TRUE) %>%
sf::st_as_sf()
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.presence.points.pc[dimensions]), plot = TRUE)
summary(species.model)
#density Function
densityFunction <- mclustDensityFunction(env.model = environmental.data.model, presence.model = species.model,
dim = dimensions, threshold = environment.threshold)
# # set sampling parameters
covariance.proposal.function <-0.5
proposalFunction <- addHighDimGaussian(cov.mat =covariance.proposal.function * diag(length(dimensions)), dim = length(dimensions))
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Spatial Plot by Density",
color = "Density")
# subsample env space to speed up the process
env.with.pc.fs <- env.with.pc.fs[runif(nrow(env.with.pc.fs)/1, 1, nrow(env.with.pc.fs)),]
# Attaching the data in the PCA coordinates
env.with.pc.fs <- rpc$PCs %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(env.data.sf)
# subsample env space to speed up the process
env.with.pc.fs <- env.with.pc.fs[runif(nrow(env.with.pc.fs)/1, 1, nrow(env.with.pc.fs)),]
#specify the dimension that should be included in the following analysys
dimensions <- c("PC1", "PC2") #, "PC3", "PC4","PC5"
# clean data
env.data.cleaned <- sf::st_drop_geometry(env.with.pc.fs[dimensions])
# environment model
environmental.data.model <- mclust::densityMclust(env.data.cleaned, plot = TRUE)
summary(environmental.data.model)
env.with.pc.fs$density <- mclust::predict.densityMclust(environmental.data.model, env.data.cleaned)
environment.threshold <- stats::quantile(environmental.densities, 0.05)
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Spatial Plot by Density",
color = "Density")
env.with.pc.fs$density <- mclust::predict.densityMclust(environmental.data.model, env.data.cleaned) < environment.threshold
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Spatial Plot by Density",
color = "Density")
env.with.pc.fs$density <- as.integer(mclust::predict.densityMclust(environmental.data.model, env.data.cleaned) < environment.threshold)
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Spatial Plot by Density",
color = "Density")
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Density under the environmental threshold, at 0.05 percentile",
color = "Density")
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
#scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Density under the environmental threshold, at 0.05 percentile",
color = "Density")
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Density under the environmental threshold, at 0.05 percentile")
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Density under the environmental threshold, at 0.05 percentile",
color = "Density")
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Density under the environmental threshold, at 0.05 percentile",
color = "Threshold")
environment.threshold <- stats::quantile(environmental.densities, 0.01)
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Density under the environmental threshold, at 0.01 percentile",
color = "Threshold")
env.with.pc.fs$density <- as.integer(mclust::predict.densityMclust(environmental.data.model, env.data.cleaned) < environment.threshold)
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Density under the environmental threshold, at 0.01 percentile",
color = "Threshold")
env.with.pc.fs$density <- mclust::predict.densityMclust(environmental.data.model, env.data.cleaned)
environment.threshold <- stats::quantile(environmental.densities, 0.01)
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "prediced desnity by the environmental model,
color = "Density")
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Density predicted by the environmental model",
color = "Density")
env.with.pc.fs$density.species <- mclust::predict.densityMclust(species.model, env.data.cleaned)
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density.species)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Spatial Plot by Density",
color = "Density")
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density.species)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Denisty of the species model",
color = "Density")
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/plot_environment.R", echo=TRUE)
environment.threshold <- stats::quantile(env.with.pc.fs$density, 0.01)
# sample species model
virtual.presence.data <- getVirtualSpeciesPresencePoints(env.data = env.data.raster, n.samples = 300)
virtual.presence.points <- virtual.presence.data$sample.points
virtual.presence.points.pc <- terra::extract(rpc$PCs, virtual.presence.points, bind = TRUE) %>%
sf::st_as_sf()
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.presence.points.pc[dimensions]), plot = TRUE)
env.with.pc.fs$density.species <- mclust::predict.densityMclust(species.model, env.data.cleaned)
summary(species.model)
#density Function
densityFunction <- mclustDensityFunction(env.model = environmental.data.model, presence.model = species.model,
dim = dimensions, threshold = environment.threshold)
# # set sampling parameters
covariance.proposal.function <-0.5
proposalFunction <- addHighDimGaussian(cov.mat =covariance.proposal.function * diag(length(dimensions)), dim = length(dimensions))
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Denisty of the environmental model",
color = "Density")
ggplot(data = env.with.pc.fs) +
geom_sf(aes(color = density.species)) +  # use density for color mapping
scale_color_viridis_c() +        # optional: use a nice continuous color scale
theme_minimal() +                # cleaner theme
labs(title = "Denisty of the species model",
color = "Density")
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/plot_environment.R", echo=TRUE)
View(virtual.presence.data)
load_al
library(migh)
library(mathisRhelpers)
gm()
load_all()
# sample species model
virtual.presence.data <- getVirtualSpeciesPresencePoints(env.data = env.data.raster, n.samples = 300)
View(random.sp)
plot(random.sp$suitab.raster)
terra::plot(random.sp$suitab.raster)
random.sp$suitab.raster
# sample species model
virtual.presence.data <- getVirtualSpeciesPresencePoints(env.data = env.data.raster, n.samples = 300)
load_all()
load_all()
# sample species model
virtual.presence.data <- getVirtualSpeciesPresencePoints(env.data = env.data.raster, n.samples = 300)
# sample species model
virtual.presence.data <- getVirtualSpeciesPresencePoints(env.data = env.data.raster, n.samples = 300)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/plot_environment.R", echo=TRUE)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/plot_environment.R", echo=TRUE)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
x <- env.with.pc.fs[1,]
x
f <- addHighDimGaussian(dim = 2)
f(x, dim = c("PC1", PC2))
f(x, dim = c("PC1", "PC2"))
f(x, dim = c("PC1", "PC2"))
f(x, dim = c("PC1", "PC2"))
f(x, dim = c("PC1", "PC2"))
f(x, dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 2 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 100 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10000 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10000 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10000 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10000 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10 ,dim = c("PC1", "PC2"))
f(x, covariance.adjuster = 10 ,dim = c("PC1", "PC2"))
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
traceback()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
traceback()
mvtnorm::rmvnorm(1, mean = 0.7, sigma = 0.1)
mvtnorm::rmvnorm(1, mean = 0.7, sigma = 0.1)
mvtnorm::rmvnorm(1, mean = 0.7, sigma = matrix(0.1, nrow = 1))
?mvtnorm::rmvnorm
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
traceback()
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
diag(0.1)
diag(0.1,1,1)
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
traceback
traceback()
load_all()
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
