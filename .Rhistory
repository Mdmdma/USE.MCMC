# Width and height in pixels (adjust as needed)
width_px <- 700
height_px <- 700
png(filename = output_file, width = width_px, height = height_px)
# --- Create the plot using ggplot2 and tidyterra ---
p <- ggplot() +
# First add the raster data
geom_spatraster(data = raster_layer) +
# Then apply the color scale with NA set to white
scale_fill_viridis_c(
na.value = "white"
) +
theme_void() + # Use theme_void for a white background and no axis text/ticks
theme(
plot.margin = margin(0, 0, 0, 0, unit = "pt"), # Set all margins to 0 with pt units
panel.border = element_blank(), # Remove panel border
panel.spacing = unit(0, "pt"), # Remove panel spacing
panel.background = element_rect(fill = "white", colour = NA), # Ensure panel background is white
plot.background = element_rect(fill = "white", colour = NA), # Ensure plot background is white
legend.position = "none" # Remove the legend
) +
# Add this to ensure the plot expands to fill the entire space
coord_sf(expand = FALSE)
# Print the plot to the device
print(p)
# Close the device - this is essential to save the file
dev.off()
invisible(lapply(dimensions, function(col) {
# Create an empty plot with appropriate limits
x_range <- range(
c(density(env.with.pc.fs[[col]])$x,
density(virtual.presence.points.pc[[col]])$x,
density(real.sampled.points[[col]])$x)
)
y_range <- range(
c(density(env.with.pc.fs[[col]])$y,
density(virtual.presence.points.pc[[col]])$y,
density(real.sampled.points[[col]])$y)
)
# Plot the first density
plot(density(env.with.pc.fs[[col]]),
col = "green",
main = paste("Density Comparison for", col),
xlim = x_range,
ylim = y_range,
lwd = 2)
# Add the second density to the same plot
lines(density(virtual.presence.points.pc[[col]]),
col = "black",
lwd = 2)
# Add the third density to the same plot
lines(density(real.sampled.points[[col]]),
col = "red",
lwd = 2)
# Add a legend
legend("topleft",
legend = c("Environment", "Virtual Presence", "Sampled Points"),
col = c("green", "black", "red"),
lwd = 2)
}))
par(mfrow = c(length(dimensions),1))
invisible(lapply(dimensions, function(col) {
# Create an empty plot with appropriate limits
x_range <- range(
c(density(env.with.pc.fs[[col]])$x,
density(virtual.presence.points.pc[[col]])$x,
density(real.sampled.points[[col]])$x)
)
y_range <- range(
c(density(env.with.pc.fs[[col]])$y,
density(virtual.presence.points.pc[[col]])$y,
density(real.sampled.points[[col]])$y)
)
# Plot the first density
plot(density(env.with.pc.fs[[col]]),
col = "green",
main = paste("Density Comparison for", col),
xlim = x_range,
ylim = y_range,
lwd = 2)
# Add the second density to the same plot
lines(density(virtual.presence.points.pc[[col]]),
col = "black",
lwd = 2)
# Add the third density to the same plot
lines(density(real.sampled.points[[col]]),
col = "red",
lwd = 2)
# Add a legend
legend("topleft",
legend = c("Environment", "Virtual Presence", "Sampled Points"),
col = c("green", "black", "red"),
lwd = 2)
}))
invisible(lapply(dimensions, function(col) {
# Create an empty plot with appropriate limits
x_range <- range(
c(density(env.with.pc.fs[[col]])$x,
density(virtual.presence.points.pc[[col]])$x,
density(real.sampled.points[[col]])$x)
)
y_range <- range(
c(density(env.with.pc.fs[[col]])$y,
density(virtual.presence.points.pc[[col]])$y,
density(real.sampled.points[[col]])$y)
)
# Plot the first density
plot(density(env.with.pc.fs[[col]]),
col = "green",
main = paste("Density Comparison for", col),
xlim = x_range,
ylim = y_range,
lwd = 2)
# Add the second density to the same plot
lines(density(virtual.presence.points.pc[[col]]),
col = "black",
lwd = 2)
# Add the third density to the same plot
lines(density(real.sampled.points[[col]]),
col = "red",
lwd = 2)
# Add a legend
legend("topleft",
legend = c("Environment", "Virtual Presence", "Sampled Points"),
col = c("green", "black", "red"),
lwd = 2)
}))
library(terra)
# Create a sample continuous raster
# Replace this with your actual raster
r_continuous <- rast(ncol=10, nrow=10)
values(r_continuous) <- runif(100, 0, 10) # Example continuous values
# View original values
plot(r_continuous, main="Original Continuous Raster")
print(values(r_continuous))
# 1. Floor the raster values
r_floored <- floor(r_continuous)
# View floored values
plot(r_floored, main="Floored Raster")
print(values(r_floored))
# 2. Define your reclassification matrix
# Let's say you want values <= 5 (after flooring) to become 1, and values > 5 to become 2.
# The matrix should define the ranges. The first column is the lower bound (inclusive by default for matrix),
# the second column is the upper bound (inclusive by default for matrix),
# and the third column is the new value.
# For ranges, it's often clearer to use the 'right=TRUE' or 'right=FALSE' argument in classify,
# but a matrix is also straightforward.
# Let's use a matrix defining breaks: values from -Inf up to and including 5 become 1,
# and values from 5+epsilon up to Inf become 2. A simpler way with a matrix for breaks
# is to define the upper limit of each range and the new value.
# If you want values <= 5 to be 1 and > 5 to be 2:
reclass_matrix <- matrix(c(
-Inf, 5, 1,
5, Inf, 2
), ncol=3, byrow=TRUE)
# Note: The classify function with a matrix treats the intervals as [min, max].
# If you want values strictly > 5 to be 2, you might adjust the matrix or use the 'right' argument with a vector of breaks.
# Using a matrix with breaks:
reclass_matrix_breaks <- matrix(c(
0, 1,  # Values in range [0, 1] become 1 (adjust if your floored values can be negative)
1, 2   # Values > 1 become 2
), ncol=2, byrow=TRUE)
# A clearer way for two values based on a threshold (e.g., threshold 6 for floored values)
# values <= 5 become 1, values >= 6 become 2
reclass_matrix_threshold <- matrix(c(
-Inf, 5, 1,  # Values from -Inf up to 5 become 1
6,  Inf, 2   # Values from 6 up to Inf become 2
), ncol=3, byrow=TRUE)
# Let's use the threshold matrix where floored values <= 5 become 1 and >= 6 become 2
# If you want <=5 to be 1 and >5 to be 2, after flooring, this means floored values 0,1,2,3,4,5 become 1 and 6,7,8,... become 2.
reclass_matrix_two_values <- matrix(c(
-Inf, 5.5, 1,  # Values from -Inf up to and including 5.5 become 1 (covers floored values 0-5)
5.5,  Inf, 2   # Values from 5.5 up to Inf become 2 (covers floored values 6 and above)
), ncol=3, byrow=TRUE)
# 3. Apply the classification
r_discrete <- classify(r_floored, reclass_matrix_two_values)
# View the discrete raster
plot(r_discrete, main="Discrete Raster (2 values)")
print(values(r_discrete))
plot_discrete_raster_tidyterra <- function(rast,
colors = c("#F8766D", "#00BFC4"),
legend_title = "Value",
plot_title = "Discrete Raster Plot (tidyterra)") {
# Check if the raster has values
if (is.null(values(rast, mat=FALSE))) {
stop("Raster has no values to plot.")
}
# Get unique values and check if there are exactly two
unique_vals <- sort(unique(values(rast, mat=FALSE))) # sort ensures consistent color mapping
if (length(unique_vals) != 2) {
stop(paste("Input raster must have exactly two unique discrete values. Found:", length(unique_vals)))
}
if (length(colors) != 2) {
stop("You must provide exactly two colors.")
}
# --- Create the ggplot using tidyterra ---
p <- ggplot() +
geom_spatraster(data = rast, aes(fill = factor(lyr.1))) + # tidyterra uses lyr.1 by default
scale_fill_manual(
values = colors,
labels = unique_vals, # Use the actual unique values as legend labels
name = legend_title,
guide = guide_legend(override.aes = list(size = 5)) # Make legend keys larger
) +
coord_equal() + # Ensure correct aspect ratio
labs(title = plot_title, x = NULL, y = NULL) + # No axis labels needed for a map
theme_void() + # Clean theme with no axes or background
theme(
plot.title = element_text(hjust = 0.5), # Center plot title
legend.position = "right" # Adjust legend position as needed
)
return(p)
}
# --- Example Usage for tidyterra version ---
# Use the same sample rasters created earlier
ggplot_plot_tidy <- plot_discrete_raster_tidyterra(r_discrete,
colors = c("gold", "purple"),
legend_title = "Type A",
plot_title = "Discrete Raster Plot (tidyterra)")
library(ggplot2)
plot_discrete_raster_tidyterra <- function(rast,
colors = c("#F8766D", "#00BFC4"),
legend_title = "Value",
plot_title = "Discrete Raster Plot (tidyterra)") {
# Check if the raster has values
if (is.null(values(rast, mat=FALSE))) {
stop("Raster has no values to plot.")
}
# Get unique values and check if there are exactly two
unique_vals <- sort(unique(values(rast, mat=FALSE))) # sort ensures consistent color mapping
if (length(unique_vals) != 2) {
stop(paste("Input raster must have exactly two unique discrete values. Found:", length(unique_vals)))
}
if (length(colors) != 2) {
stop("You must provide exactly two colors.")
}
# --- Create the ggplot using tidyterra ---
p <- ggplot() +
geom_spatraster(data = rast, aes(fill = factor(lyr.1))) + # tidyterra uses lyr.1 by default
scale_fill_manual(
values = colors,
labels = unique_vals, # Use the actual unique values as legend labels
name = legend_title,
guide = guide_legend(override.aes = list(size = 5)) # Make legend keys larger
) +
coord_equal() + # Ensure correct aspect ratio
labs(title = plot_title, x = NULL, y = NULL) + # No axis labels needed for a map
theme_void() + # Clean theme with no axes or background
theme(
plot.title = element_text(hjust = 0.5), # Center plot title
legend.position = "right" # Adjust legend position as needed
)
return(p)
}
# --- Example Usage for tidyterra version ---
# Use the same sample rasters created earlier
ggplot_plot_tidy <- plot_discrete_raster_tidyterra(r_discrete,
colors = c("gold", "purple"),
legend_title = "Type A",
plot_title = "Discrete Raster Plot (tidyterra)")
library(terra)
plot_discrete_raster_tidyterra <- function(rast,
colors = c("#F8766D", "#00BFC4"),
legend_title = "Value",
plot_title = "Discrete Raster Plot (tidyterra)") {
# Check if the raster has values
if (is.null(values(rast, mat=FALSE))) {
stop("Raster has no values to plot.")
}
# Get unique values and check if there are exactly two
unique_vals <- sort(unique(values(rast, mat=FALSE))) # sort ensures consistent color mapping
if (length(unique_vals) != 2) {
stop(paste("Input raster must have exactly two unique discrete values. Found:", length(unique_vals)))
}
if (length(colors) != 2) {
stop("You must provide exactly two colors.")
}
# --- Create the ggplot using tidyterra ---
p <- ggplot() +
geom_spatraster(data = rast, aes(fill = factor(lyr.1))) + # tidyterra uses lyr.1 by default
scale_fill_manual(
values = colors,
labels = unique_vals, # Use the actual unique values as legend labels
name = legend_title,
guide = guide_legend(override.aes = list(size = 5)) # Make legend keys larger
) +
coord_equal() + # Ensure correct aspect ratio
labs(title = plot_title, x = NULL, y = NULL) + # No axis labels needed for a map
theme_void() + # Clean theme with no axes or background
theme(
plot.title = element_text(hjust = 0.5), # Center plot title
legend.position = "right" # Adjust legend position as needed
)
return(p)
}
# --- Example Usage for tidyterra version ---
# Use the same sample rasters created earlier
ggplot_plot_tidy <- plot_discrete_raster_tidyterra(r_discrete,
colors = c("gold", "purple"),
legend_title = "Type A",
plot_title = "Discrete Raster Plot (tidyterra)")
library(tidyterra)
plot_discrete_raster_tidyterra <- function(rast,
colors = c("#F8766D", "#00BFC4"),
legend_title = "Value",
plot_title = "Discrete Raster Plot (tidyterra)") {
# Check if the raster has values
if (is.null(values(rast, mat=FALSE))) {
stop("Raster has no values to plot.")
}
# Get unique values and check if there are exactly two
unique_vals <- sort(unique(values(rast, mat=FALSE))) # sort ensures consistent color mapping
if (length(unique_vals) != 2) {
stop(paste("Input raster must have exactly two unique discrete values. Found:", length(unique_vals)))
}
if (length(colors) != 2) {
stop("You must provide exactly two colors.")
}
# --- Create the ggplot using tidyterra ---
p <- ggplot() +
geom_spatraster(data = rast, aes(fill = factor(lyr.1))) + # tidyterra uses lyr.1 by default
scale_fill_manual(
values = colors,
labels = unique_vals, # Use the actual unique values as legend labels
name = legend_title,
guide = guide_legend(override.aes = list(size = 5)) # Make legend keys larger
) +
coord_equal() + # Ensure correct aspect ratio
labs(title = plot_title, x = NULL, y = NULL) + # No axis labels needed for a map
theme_void() + # Clean theme with no axes or background
theme(
plot.title = element_text(hjust = 0.5), # Center plot title
legend.position = "right" # Adjust legend position as needed
)
return(p)
}
# --- Example Usage for tidyterra version ---
# Use the same sample rasters created earlier
ggplot_plot_tidy <- plot_discrete_raster_tidyterra(r_discrete,
colors = c("gold", "purple"),
legend_title = "Type A",
plot_title = "Discrete Raster Plot (tidyterra)")
print(ggplot_plot_tidy)
# Install necessary packages if you haven't already
# install.packages("terra")
# install.packages("ggplot2")
# install.packages("tidyterra")
library(terra)
library(ggplot2)
library(tidyterra)
# Create a sample discrete raster (replace with your actual raster)
# For demonstration, let's create a simple raster
r <- rast(ncol=10, nrow=10, xmin=0, xmax=10, ymin=0, ymax=10)
values(r) <- sample(1:3, size = ncell(r), replace = TRUE)
discrete_raster <- r
# Define class labels and corresponding colors
class_labels <- c("Forest", "Water", "Urban")
class_colors <- c("darkgreen", "blue", "gray")
# Ensure the raster values are factors for correct discrete plotting
# Although mapping directly in aes(fill = as.factor(layer_name)) often works,
# explicitly setting levels can be safer if not all classes are present in the
# current view or if you want to control the order.
# You can also set levels directly in the SpatRaster if preferred.
# levels(discrete_raster) <- data.frame(ID = 1:3, Class = class_labels)
# Plot the discrete raster using ggplot2 and tidyterra
ggplot() +
geom_spatraster(data = discrete_raster, aes(fill = as.factor(lyr.1))) + # Use as.factor() for discrete legend
scale_fill_manual(values = class_colors,     # Specify colors for each class
labels = class_labels,     # Specify labels for the legend
name = "Land Cover") +     # Set the legend title
labs(title = "Discrete Raster Plot with Legend") +
theme_minimal() + # Use a minimal theme for cleaner plot
theme(legend.position = "right") # Adjust legend position if needed
# Define class labels and corresponding colors
class_labels <- c("Forest", "Water", "Urban")
class_colors <- c("darkgreen", "blue", "gray")
# Plot the discrete raster using ggplot2 and tidyterra
ggplot() +
geom_spatraster(data = discrete_raster, aes(fill = as.factor(layer))) + # Use the actual layer name here!
scale_fill_manual(values = class_colors,     # Specify colors for each class
labels = class_labels,     # Specify labels for the legend
name = "Land Cover") +     # Set the legend title
labs(title = "Discrete Raster Plot with Legend") +
theme_minimal() + # Use a minimal theme for cleaner plot
theme(legend.position = "right") # Adjust legend position if needed
library(terra)
library(ggplot2)
library(tidyterra)
# Assuming 'r' is your SpatRaster object with continuous data
# Example:
r <- rast(ncols=50, nrows=50, xmin=0, xmax=10, ymin=0, ymax=10)
values(r) <- runif(ncell(r), 0, 100)
# Convert the SpatRaster to a data frame
r_df <- as.data.frame(r, xy = TRUE)
colnames(r_df)[3] <- "value" # Rename the value column for clarity
# Define your breaks and corresponding colors
breaks <- c(0, 20, 40, 60, 80, 100) # Define the upper limits of your classes
colors <- c("lightblue", "green", "yellow", "orange", "red") # Define colors for each class
# Plot using ggplot2
ggplot(r_df) +
geom_tile(aes(x, y, fill = value)) +
scale_fill_gradientn(colors = colors,
breaks = breaks,
guide = guide_colorbar(nbin = length(colors), drawedges = TRUE)) +
theme_minimal() +
ggtitle("ggplot2 Plot of Continuous Raster with Discrete Color Scale")
ggplot(r_cat_df) +
geom_tile(aes(x, y, fill = factor(category))) + # Map the category as a factor to fill
scale_fill_manual(values = c("1" = "#e41a1c", "2" = "#377eb8", "3" = "#4daf4a", "4" = "#984ea3", "5" = "#ff7f00"), # Manually define colors for each category value
labels = c("Class A", "Class B", "Class C", "Class D", "Class E")) + # Define legend labels
theme_minimal() +
ggtitle("ggplot2 Plot of Categorical Raster")
ggplot(r_df) +
geom_tile(aes(x, y, fill = factor(category))) + # Map the category as a factor to fill
scale_fill_manual(values = c("1" = "#e41a1c", "2" = "#377eb8", "3" = "#4daf4a", "4" = "#984ea3", "5" = "#ff7f00"), # Manually define colors for each category value
labels = c("Class A", "Class B", "Class C", "Class D", "Class E")) + # Define legend labels
theme_minimal() +
ggtitle("ggplot2 Plot of Categorical Raster")
library(terra)
library(ggplot2)
library(tidyterra)
# Assuming 'r_cat' is your categorical SpatRaster object
# Example:
r_cat <- rast(ncols=10, nrows=10)
values(r_cat) <- sample(1:5, ncell(r_cat), replace=TRUE)
r_cat <- as.factor(r_cat)
# (Optional) Define levels and a color table for the SpatRaster
levels(r_cat) <- data.frame(value = 1:5, desc = c("Class A", "Class B", "Class C", "Class D", "Class E"))
coltab(r_cat) <- data.frame(value = 1:5, color = c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# Convert to tidy format
r_cat_df <- as.data.frame(r_cat, xy = TRUE)
colnames(r_cat_df)[3] <- "category" # Rename the value column
# Plot using ggplot2
ggplot(r_cat_df) +
geom_tile(aes(x, y, fill = factor(category))) + # Map the category as a factor to fill
scale_fill_manual(values = c("1" = "#e41a1c", "2" = "#377eb8", "3" = "#4daf4a", "4" = "#984ea3", "5" = "#ff7f00"), # Manually define colors for each category value
labels = c("Class A", "Class B", "Class C", "Class D", "Class E")) + # Define legend labels
theme_minimal() +
ggtitle("ggplot2 Plot of Categorical Raster")
library(terra)
library(ggplot2)
library(tidyterra)
# Assuming 'r' is your SpatRaster object with continuous data
# Example:
r <- rast(ncols=50, nrows=50, xmin=0, xmax=10, ymin=0, ymax=10)
values(r) <- runif(ncell(r), 0, 100)
# Convert the SpatRaster to a data frame
r_df <- as.data.frame(r, xy = TRUE)
colnames(r_df)[3] <- "value" # Rename the value column for clarity
# Define your breaks and corresponding colors
breaks <- c(0, 20, 40, 60, 80, 100) # Define the upper limits of your classes
colors <- c("lightblue", "green", "yellow", "orange", "red") # Define colors for each class
# Plot using ggplot2
ggplot(r_df) +
geom_tile(aes(x, y, fill = value)) +
scale_fill_gradientn(colors = colors,
breaks = breaks,
guide = guide_colorbar(nbin = length(colors), drawedges = TRUE)) +
theme_minimal() +
ggtitle("ggplot2 Plot of Continuous Raster with Discrete Color Scale")
?scale_fill_discrete
library(terra)
r <- rast(nrows=10, ncols=10)
values(r) <- runif(ncell(r))
# Classify into 3 bins
m <- matrix(c(0, 0.3, 1, 0.3, 0.7, 2, 0.7, 1, 3), ncol=3, byrow=TRUE)
r_class <- classify(r, m)
r_cat <- as.factor(r_class)
levels(r_cat) <- data.frame(ID=1:3, Class=c("Low", "Medium", "High"))
plot(r_cat)
library("entropy")
# observed counts for each bin
y = c(4, 2, 3, 0, 2, 4, 0, 0, 2, 1, 1)
entropy(y, method="ML")
entropy(y, method="MM")
entropy(y, method="Jeffreys")
entropy(y, method="Laplace")
entropy(y, method="SG")
entropy(y, method="minimax")
entropy(y, method="CS")
#entropy(y, method="NSB")
entropy(y, method="shrink")
library("entropy")
# observed counts for each bin
y = c(4, 2, 3, 0, 2, 4, 0, 0, 2, 1, 1)
entropy(y, method="ML")
entropy(y, method="MM")
entropy(y, method="Jeffreys")
entropy(y, method="Laplace")
entropy(y, method="SG")
entropy(y, method="minimax")
entropy(y, method="CS")
entropy(y, method="NSB")
library("entropy")
# observed counts for each bin
y = c(4, 2, 3, 0, 2, 4, 0, 0, 2, 1, 1)
entropy(y, method="ML")
entropy(y, method="MM")
entropy(y, method="Jeffreys")
entropy(y, method="Laplace")
entropy(y, method="SG")
entropy(y, method="minimax")
entropy(y, method="CS")
entropy(y, method="shrink")
entropy(y, lambda.freqs, method=c("ML", "MM", "Jeffreys", "Laplace", "SG",
"minimax", "CS", "NSB", "shrink"), unit=c("log", "log2", "log10"), verbose=TRUE, ...)
entropy(y, lambda.freqs, method=c("ML", "MM", "Jeffreys", "Laplace", "SG",
"minimax", "CS", "NSB", "shrink"), unit=c("log", "log2", "log10"), verbose=TRUE)
freqs(y, lambda.freqs, method=c("ML", "MM", "Jeffreys", "Laplace", "SG",
"minimax", "CS", "NSB", "shrink"), unit=c("log", "log2", "log10"), verbose=TRUE)
entropy::freqs(y)
sum(freqs(y))
