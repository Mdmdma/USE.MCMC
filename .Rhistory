# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# setup environment to compute in parallel
num_cores <- detectCores() - 1
cl <- makeCluster(num_cores)
max.distance <- 2
clusterExport(cl, c("mapBackOnRealPoints", "env.with.pc.fs", "dimensions", "max.distance"))
# map back onto real points
real.sampled.points.list <- parallel::parApply(cl, sampled.points, 1, function(point) mapBackOnRealPoints(env.with.pc.fs, point, dimensions, threshold = max.distance))
cat(sum(is.na(real.sampled.points.list)) ,"points have no real counterpart in the environment space, given a maximal distance of ", max.distance, "!")
real.sampled.points.list.clean <- real.sampled.points.list[!is.na(real.sampled.points.list)]
real.sampled.points <- do.call(rbind, real.sampled.points.list.clean)
#plot
par(mfrow = c(2, 2))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("sampled points with coveariance", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
plot_points_with_lines(real.sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
plot(env.with.pc.fs$PC1, env.with.pc.fs$PC2, main = "Environment")
plot(virtual.precence.points.pc$PC1, virtual.precence.points.pc$PC2, xlim = c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)),
ylim = c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2)), main = " Virtual prescence points" )
par(mfrow = c(3, length(dimensions)))
invisible(lapply(dimensions, function(col) hist(env.with.pc.fs[[col]], main=paste("Histogram of environment", col))))
invisible(lapply(dimensions, function(col) hist(virtual.precence.points.pc[[col]], main=paste("Histogram of virtual presence", col))))
invisible(lapply(dimensions, function(col) hist(real.sampled.points[[col]], main=paste("Histogram of sampled points", col))))
par(mfrow = c(3, length(dimensions)))
invisible(lapply(dimensions, function(col) plot(density(env.with.pc.fs[[col]]), main=paste("Density of environment", col))))
invisible(lapply(dimensions, function(col) plot(density(virtual.precence.points.pc[[col]]), main=paste("Density of virtual presence", col))))
invisible(lapply(dimensions, function(col) plot(density(real.sampled.points[[col]]), main=paste("Density of sampled points", col))))
par(mfrow = c(1, 1))
plotDensity2dpro(dataset =  real.sampled.points, species = virtual.precence.points.pc, xlim = c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), ylim =c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2)),
densityFunction = densityFunction, resolution = 100)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(env.data = env.data.raster, n.samples = 1000)
View(new.pres)
View(presence.points)
?wrap
lobstr::obj_size(new.pres)
lobstr::obj_size(env.data)
lobstr::obj_size(precence.points)
lobstr::obj_size(presence.points)
presence.data$sample.points
presence.data <- virtualspecies::sampleOccurrences(new.pres,
n = n.samples, # The number of points to sample
type = "presence only",
detection.probability = 1,
correct.by.suitability = TRUE,
plot = TRUE)
# Generate a presence-only data set
presence.dataset <- presence.data$sample.points[c("x", "y")]
presence.dataset <- sf::st_as_sf(presence.dataset, coords=c("x", "y"), crs=4326)["geometry"]
presence.dataset <- terra::vect(presence.dataset)
presence.data$sample.points <- presence.dataset
presence.data$sample.points
presence.data <- virtualspecies::sampleOccurrences(new.pres,
n = n.samples, # The number of points to sample
type = "presence only",
detection.probability = 1,
correct.by.suitability = TRUE,
plot = TRUE)
presence.data$sample.points
# Generate a presence-only data set
presence.dataset <- presence.data$sample.points[c("x", "y")]
presence.dataset <- sf::st_as_sf(presence.dataset, coords=c("x", "y"), crs=4326)["geometry"]
presence.dataset <- terra::vect(presence.dataset)
presence.data$sample.points <- presence.dataset
View(presence.data)
# sample species model
virtual.precence.data <- getVirtualSpeciesPresencePoints(env.data = env.data.raster, n.samples = 1000)
virtual.precence.points <- virtual.precence.data$presence.points
load_all()
# sample species model
virtual.precence.data <- getVirtualSpeciesPresencePoints(env.data = env.data.raster, n.samples = 1000)
virtual.precence.points <- virtual.precence.data$presence.points
virtual.presence.points <- virtual.presence.data$presence.points
# sample species model
virtual.presence.data <- getVirtualSpeciesPresencePoints(env.data = env.data.raster, n.samples = 1000)
virtual.presence.points <- virtual.presence.data$presence.points
virtual.presence.points.pc <- terra::extract(rpc$PCs, virtual.presence.points, bind = TRUE) %>%
sf::st_as_sf()
# Load required libraries
library(USE.MCMC)
library(terra)
library(virtualspecies)
library(sf)
library(ggplot2)
library(parallel)
#Nedded for plotting
par(mfrow = c(1, 1))
# load data
env.data.raster <- USE.MCMC::Worldclim_tmp %>%
terra::rast( type="xyz")
# convert to SF dataframe
env.data.sf <- env.data.raster %>%
as.data.frame(xy = TRUE) %>%
sf::st_as_sf(coords = c("x", "y"))
# fixing the
set.seed(42)
# Generate the environmental space using PCA
rpc <- rastPCA(env.data.raster,  stand = TRUE)
# Attaching the data in the PCA coordinates
env.with.pc.fs <- rpc$PCs %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(env.data.sf)
# subsample env space to speed up the process
env.with.pc.fs <- env.with.pc.fs[runif(nrow(env.with.pc.fs)/10, 1, nrow(env.with.pc.fs)),]
#specify the dimension that should be included in the following analysys
dimensions <- c("PC1", "PC2") #, "PC3", "PC4","PC5"
# clean data
env.data.cleaned <- sf::st_drop_geometry(env.with.pc.fs[dimensions])
# environment model
environmental.data.model <- mclust::densityMclust(env.data.cleaned, plot = TRUE)
summary(environmental.data.model)
environmental.densities <- mclust::predict.densityMclust(environmental.data.model, env.data.cleaned)
environment.threshold <- stats::quantile(environmental.densities, 0.05)
# sample species model
virtual.presence.data <- getVirtualSpeciesPresencePoints(env.data = env.data.raster, n.samples = 1000)
View(virtual.presence.data)
virtual.presence.points <- virtual.presence.data$presence.points
virtual.presence.points <- virtual.presence.data$sample.points
virtual.presence.points.pc <- terra::extract(rpc$PCs, virtual.presence.points, bind = TRUE) %>%
sf::st_as_sf()
virtual.presence.points.pc <- sf::st_drop_geometry(virtual.presence.points.pc[dimensions])
species.model = mclust::densityMclust(virtual.presence.points.pc, plot = TRUE)
summary(species.model)
#density Function
densityFunction <- mclustDensityFunction(env.model = environmental.data.model, presence.model = species.model,
dim = dimensions, threshold = environment.threshold)
# set sampling parameters
covariance.proposal.function <-0.5
proposalFunction <- addHighDimGaussian(cov_mat =covariance.proposal.function * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# setup environment to compute in parallel
num_cores <- detectCores() - 1
cl <- makeCluster(num_cores)
max.distance <- 2
clusterExport(cl, c("mapBackOnRealPoints", "env.with.pc.fs", "dimensions", "max.distance"))
# map back onto real points
real.sampled.points.list <- parallel::parApply(cl, sampled.points, 1, function(point) mapBackOnRealPoints(env.with.pc.fs, point, dimensions, threshold = max.distance))
cat(sum(is.na(real.sampled.points.list)) ,"points have no real counterpart in the environment space, given a maximal distance of ", max.distance, "!")
real.sampled.points.list.clean <- real.sampled.points.list[!is.na(real.sampled.points.list)]
real.sampled.points <- do.call(rbind, real.sampled.points.list.clean)
#plot
par(mfrow = c(2, 2))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("sampled points with coveariance", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
plot_points_with_lines(real.sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
plot(env.with.pc.fs$PC1, env.with.pc.fs$PC2, main = "Environment")
plot(virtual.presence.points.pc$PC1, virtual.presence.points.pc$PC2, xlim = c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)),
ylim = c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2)), main = " Virtual prescence points" )
par(mfrow = c(3, length(dimensions)))
invisible(lapply(dimensions, function(col) hist(env.with.pc.fs[[col]], main=paste("Histogram of environment", col))))
invisible(lapply(dimensions, function(col) hist(virtual.presence.points.pc[[col]], main=paste("Histogram of virtual presence", col))))
invisible(lapply(dimensions, function(col) hist(real.sampled.points[[col]], main=paste("Histogram of sampled points", col))))
par(mfrow = c(3, length(dimensions)))
invisible(lapply(dimensions, function(col) plot(density(env.with.pc.fs[[col]]), main=paste("Density of environment", col))))
invisible(lapply(dimensions, function(col) plot(density(virtual.presence.points.pc[[col]]), main=paste("Density of virtual presence", col))))
invisible(lapply(dimensions, function(col) plot(density(real.sampled.points[[col]]), main=paste("Density of sampled points", col))))
par(mfrow = c(1, 1))
plotDensity2dpro(dataset =  real.sampled.points, species = virtual.presence.points.pc, xlim = c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), ylim =c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2)),
densityFunction = densityFunction, resolution = 100)
use_r("plotInGeographicslSpace")
rs <- virtual.presence.data$original.distribution.raster
rs
terra::unwrap(rs)
unwrap(unwrap(rs))
plot(rs)
plot(unwrap(rs))
?wrap
load_all()
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
force(presence.map)
force(presence.points)
force(absence.points)
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points, absence.points = real.sampled.points )
force(absence.points)
force(presence.map)
force(presence.points)
virtual.presence.points.pc <- terra::extract(rpc$PCs, virtual.presence.points, bind = TRUE) %>%
sf::st_as_sf()
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
force(absence.points)
force(presence.map)
force(presence.points)
View(absence.points)
View(presence.points)
presence.map <- terra::unwrap(presence.map)
graphics::points(presence.points$geometry)
graphics::points(presence.points$geometry)
graphics::points(absence.points$geometry)
graphics::points(absence.points$geometry, col = "blue")
?points
graphics::points(absence.points$geometry, col = "red", pch = 20)
graphics::points(presence.points$geometry, col = "black", pch = 20)
plot(presence.map)
graphics::points(presence.points$geometry, col = "black", pch = 20)
plot(presence.map)
par(1,1)
mfrow = c(1,1)
plot(presence.map)
plot(presence.map)
plot(presence.map)
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
presence.map <- terra::unwrap(presence.map)
mfrow = c(1,1)
plot(presence.map)
load_al
library(mathisRhelpers)
gm()
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
traceback
traceback)
traceback()
traceback()
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.presence.points.pc[dim]), plot = TRUE)
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.presence.points.pc[dimensions]), plot = TRUE)
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
traceback()
summary(species.model)
#density Function
densityFunction <- mclustDensityFunction(env.model = environmental.data.model, presence.model = species.model,
dim = dimensions, threshold = environment.threshold)
# set sampling parameters
covariance.proposal.function <-0.5
proposalFunction <- addHighDimGaussian(cov_mat =covariance.proposal.function * diag(length(dimensions)), dim = length(dimensions))
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.presence.points.pc[dimensions]), plot = TRUE)
summary(species.model)
#density Function
densityFunction <- mclustDensityFunction(env.model = environmental.data.model, presence.model = species.model,
dim = dimensions, threshold = environment.threshold)
# set sampling parameters
covariance.proposal.function <-0.5
proposalFunction <- addHighDimGaussian(cov_mat =covariance.proposal.function * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = env.with.pc.fs, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
plot(presence.map)
presence.map <- terra::unwrap(presence.map)
presence.map <- terra::unwrap(presence.map)
mfrow = c(1,1)
plot(presence.map)
force(absence.points)
force(presence.points)
View(presence.map)
plot(presence.map)
graphics::points(presence.points$geometry, col = "black", pch = 20)
graphics::points(presence.points$geometry, col = "black", pch = 20)
graphics::points(absence.points$geometry, col = "red", pch = 20)
View(presence.map)
rs <- presence.map
plot(rs)
View(virtual.presence.data)
plot(virtual.presence.data$original.distribution.raster)
plot(unwrap(virtual.presence.data$original.distribution.raster))
load_all()
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
plot(unwrap(virtual.presence.data$original.distribution.raster))
load_all()
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
load_all()
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
plot(unwrap(virtual.presence.data$original.distribution.raster))
load_all()
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
plot(virtual.presence.data$original.distribution.raster)
graphics::points(presence.points$geometry, col = "black", pch = 20)
plot(virtual.presence.data$original.distribution.raster)
graphics::points(virtual.presence.points.pc$geometry, col = "black", pch = 20)
graphics::points(eal.sampled.points$geometry, col = "red", pch = 20)
plot(virtual.presence.data$original.distribution.raster)
graphics::points(virtual.presence.points.pc$geometry, col = "black", pch = 20)
graphics::points(real.sampled.points$geometry, col = "red", pch = 20)
plot(virtual.presence.data$original.distribution.raster, main = "Geographical position of the points")
graphics::points(virtual.presence.points.pc$geometry, col = "black", pch = 20)
graphics::points(real.sampled.points$geometry, col = "red", pch = 20)
?points
legend("topright", legend = "Sampled Points", col = "red", pch = 20, bty = "n")
legend("topright", legend = "Sampled Points", col = "red", pch = 20, bty = "n")
plot(virtual.presence.data$original.distribution.raster, main = "Geographical position of the points")
graphics::points(virtual.presence.points.pc$geometry, col = "black", pch = 20)
graphics::points(real.sampled.points$geometry, col = "red", pch = 20)
legend("topright", legend = "Sampled Points", col = "red", pch = 20, bty = "n")
?legend
plot(virtual.presence.data$original.distribution.raster, main = "Geographical position of the points")
graphics::points(virtual.presence.points.pc$geometry, col = "black", pch = 20)
graphics::points(real.sampled.points$geometry, col = "red", pch = 20)
legend(0, legend = "Sampled Points", col = "red", pch = 20, bty = "n")
plot(virtual.presence.data$original.distribution.raster, main = "Geographical position of the points")
graphics::points(virtual.presence.points.pc$geometry, col = "black", pch = 20)
graphics::points(real.sampled.points$geometry, col = "red", pch = 20)
legend(1000, legend = "Sampled Points", col = "red", pch = 20, bty = "n")
debugSource("~/Desktop/semesterarbeit10/USE.MCMC/R/plotInGeographicslSpace.R", echo=TRUE)
source("~/Desktop/semesterarbeit10/USE.MCMC/R/plotInGeographicslSpace.R", echo=TRUE)
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
rm(plotInGeographicalSpace())
rm(plotInGeographicalSpace
)
load_al
load_all()
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
load_all()
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
load_all()
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
traceback()
load_all()
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
traceback()
load_all()
plotInGeographicalSpace(presence.map =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
plotInGeographicalSpace(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
plot(virtual.presence.data$original.distribution.raster, main = "Geographical position of the points")
plot(virtual.presence.data$original.distribution.raster, main = "Geographical position of the points")
graphics::points(virtual.presence.points.pc$geometry, col = "black", pch = 20)
graphics::points(real.sampled.points$geometry, col = "red", pch = 20)
legend(1000, legend = "Sampled Points", col = "red", pch = 20, bty = "n")
plotInGeographicalSpace(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
force(absence.points)
force(presence.distribution.raster)
force(presence.points)
plot(presence.distribution.raster)
plot(presence.points)
plot(presence.points$geometry)
graphics::points(absence.points$geometry, col = "red", pch = 20)
plot(presence.distribution.raster, main = "Geographical position of the points")
plotInGeographicalSpace <- function(presence.distribution.raster = NULL, presence.points = NULL, absence.points = NULL){
plot(presence.distribution.raster, main = "Geographical position of the points")
graphics::points(presence.points$geometry, col = "black", pch = 20)
graphics::points(absence.points$geometry, col = "red", pch = 20)
}
plotInGeographicalSpace <- function(presence.distribution.raster = NULL, presence.points = NULL, absence.points = NULL){
plot(presence.distribution.raster, main = "Geographical position of the points")
graphics::points(presence.points$geometry, col = "black", pch = 20)
graphics::points(absence.points$geometry, col = "red", pch = 20)
}
plotInGeographicalSpace(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
?plot
plotInGeographicalSpace <- function(presence.distribution.raster = NULL, presence.points = NULL, absence.points = NULL){
plot(presence.distribution.raster, main = "Geographical position of the points")
graphics::points(presence.points$geometry, col = "black", pch = 20)
graphics::points(absence.points$geometry, col = "red", pch = 20)
}
plotInGeographicalSpace(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
rm(plotInGeographicalSpace())
rm(plotInGeographicalSpace
)
plotInGeographicalSpace(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
plotInGeographicalSpace(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
load_all()
plotInGeographicalSpace(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
?plot
load_all()
plotInGeographicalSpace(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
load_all()
plotDensity2dpro(dataset =  real.sampled.points, species = virtual.presence.points.pc, xlim = c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), ylim =c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2)),
densityFunction = densityFunction, resolution = 100)
plotInGeographicalSpace(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
plotInGeographicalSpace(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
terra::plot(presence.distribution.raster, main = "Geographical position of the points", legend = FALSE)
load_all()
plotInGeographicalSpace(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
graphics::legend(
"topright",                      # Position of the legend
legend = c("Presence", "Absence"), # Legend text
pch = c(20, 20),                 # Point symbols
col = c("black", "red"),         # Colors matching your points
bty = "n"                        # No box around legend ("n" = none)
)
load_all()
plotInGeographicalSpace1(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
plotInGeographicalSpace(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
plotInGeographicalSpace1(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
load_all()
plotInGeographicalSpace1(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
load_all()
plotInGeographicalSpace1(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
?par
load_all()
plotInGeographicalSpace1(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
load_all()
plotInGeographicalSpace1(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
load_all()
plotInGeographicalSpace1(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
load_all()
plotInGeographicalSpace1(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
load_all()
plotInGeographicalSpace1(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
?legend
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
warnings()
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
par(mfrow = c(1, 1))
plotInGeographicalSpace1(presence.distribution.raster =  virtual.presence.data$original.distribution.raster,
presence.points = virtual.presence.points.pc, absence.points = real.sampled.points )
plotDensity2dpro(dataset =  real.sampled.points, species = virtual.presence.points.pc, xlim = c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), ylim =c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2)),
densityFunction = densityFunction, resolution = 100)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/extended_tests_burn_in.R", echo=TRUE)
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/extended_tests_burn_in.R", echo=TRUE)
warnings()
View(sampled.points)
#plot
par(mfrow = c(2, 2))
real.sampled.points$PC3 <- 0
#plot
par(mfrow = c(2, 2))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("sampled points with coveariance", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
plot_points_with_lines(real.sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
plot(env.with.pc.fs$PC1, env.with.pc.fs$PC2, main = "Environment")
plot(virtual.presence.points.pc$PC1, virtual.presence.points.pc$PC2, xlim = c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)),
ylim = c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2)), main = " Virtual prescence points" )
par(mfrow = c(3, length(dimensions)))
invisible(lapply(dimensions, function(col) hist(env.with.pc.fs[[col]], main=paste("Histogram of environment", col))))
invisible(lapply(dimensions, function(col) hist(virtual.presence.points.pc[[col]], main=paste("Histogram of virtual presence", col))))
invisible(lapply(dimensions, function(col) hist(real.sampled.points[[col]], main=paste("Histogram of sampled points", col))))
par(mfrow = c(3, length(dimensions)))
invisible(lapply(dimensions, function(col) plot(density(env.with.pc.fs[[col]]), main=paste("Density of environment", col))))
invisible(lapply(dimensions, function(col) plot(density(virtual.presence.points.pc[[col]]), main=paste("Density of virtual presence", col))))
invisible(lapply(dimensions, function(col) plot(density(real.sampled.points[[col]]), main=paste("Density of sampled points", col))))
par(mfrow = c(1, 1))
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/extended_tests_burn_in.R", echo=TRUE)
sampled.points$PC3 <- 0
#plot
par(mfrow = c(2, 2))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("sampled points with coveariance", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
plot_points_with_lines(real.sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
plot(env.with.pc.fs$PC1, env.with.pc.fs$PC2, main = "Environment")
plot(virtual.presence.points.pc$PC1, virtual.presence.points.pc$PC2, xlim = c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)),
ylim = c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2)), main = " Virtual prescence points" )
par(mfrow = c(3, length(dimensions)))
invisible(lapply(dimensions, function(col) hist(env.with.pc.fs[[col]], main=paste("Histogram of environment", col))))
invisible(lapply(dimensions, function(col) hist(virtual.presence.points.pc[[col]], main=paste("Histogram of virtual presence", col))))
invisible(lapply(dimensions, function(col) hist(real.sampled.points[[col]], main=paste("Histogram of sampled points", col))))
par(mfrow = c(3, length(dimensions)))
invisible(lapply(dimensions, function(col) plot(density(env.with.pc.fs[[col]]), main=paste("Density of environment", col))))
invisible(lapply(dimensions, function(col) plot(density(virtual.presence.points.pc[[col]]), main=paste("Density of virtual presence", col))))
invisible(lapply(dimensions, function(col) plot(density(real.sampled.points[[col]]), main=paste("Density of sampled points", col))))
par(mfrow = c(1, 1))
load_all()
load_all()
document()
document()
load_all()
plot.points.with.lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("sampled points with coveariance", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
plotPointsWithLines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("sampled points with coveariance", covariance.proposal.function),
limits = list(c(min(env.with.pc.fs$PC1), max(env.with.pc.fs$PC1)), c(min(env.with.pc.fs$PC2), max(env.with.pc.fs$PC2))))
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
traceback()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
verson()
version)
version()
stopCluster(cl)
