#------USE-----------------
setwd("/home/daniele/GitHub/USE/")
#install package
remove.packages("USE")
# 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
# token
library(devtools)
library(roxygen2)
# library(usethat)
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#------USE-----------------
setwd("/home/daniele/GitHub/USE/")
# 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
# token
library(devtools)
library(roxygen2)
# library(usethat)
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#install package
remove.packages("USE")
# library(usethat)
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
source("R/rastPCA.R")
b <- terra::rast(system.file("ex/logo.tif", package="terra"))
rpc <- USE::rastPCA(b, stand = TRUE) #errore nel predict
rpc <- rastPCA(b, stand = TRUE) #errore nel predict
source("R/princompCustom.r")
source("R/pca_predict.R")
rpc <- rastPCA(b, stand = TRUE) #errore nel predict
View(princompCustom)
View(rastPCA)
View(rastPCA)
rastPCA <- function (env.rast, nPC=NULL, naMask=TRUE, stand=FALSE){
rastPCA <- function (env.rast, nPC=NULL, naMask=TRUE, stand=FALSE){
if (inherits(env.rast, "BasicRaster")) {
env.rast <- terra::rast(env.rast)
}
if (terra::nlyr(env.rast) <= 1) {
stop("At least two layers are needed to calculate PCA")
}
if(is.null(nPC)){
nPC <- terra::nlyr(env.rast)
}
if (nPC > terra::nlyr(env.rast)) {
nPC <- terra::nlyr(env.rast)
message(paste0( "\nThe maximum number of PCs that can be estimated is ", terra::nlyr(env.rast),'\n'))
}
if (sum(terra::global(env.rast, fun="isNA"))==sum(terra::global(env.rast,fun=function(x) terra::ncell(x)))) {
stop("The layers are empty or contain only NAs")}
if (naMask==TRUE) {
maskNA <-!sum(terra::app(env.rast, is.na))
env.rast <- terra::mask(env.rast, maskNA, maskvalue = NA)
}
covMatrix <- terra::layerCor(env.rast, fun = "cov", na.rm = TRUE)
eigenDecomp <- princompCustom(covmat = covMatrix[[1]], cor = stand)
eigenDecomp$center <- covMatrix$mean[, 1] # modified after probable update of terra
eigenDecomp$n.obs  <- terra::global(!any(is.na(env.rast)), sum)$sum
if (stand==TRUE) {
S <- diag(covMatrix$covariance)
eigenDecomp$scale <- sqrt(S * (eigenDecomp$n.obs - 1)/eigenDecomp$n.obs)
}
pci <- terra::predict(env.rast, eigenDecomp, nPC=nPC, fun=pca_predict)
names(pci) <- paste0("PC", 1:nPC)
return(list(call = match.call(), pca = eigenDecomp, PCs = pci))
}
rpc <- rastPCA(b, stand = TRUE) #errore nel predict
rpc
rpc
rpc.use <- rastPCA(b, stand = TRUE) #errore nel predict
#using terra
pca <- terra::princomp(b)
pca
?princomp
#using terra
pca <- terra::princomp(b, cor=TRUE)
pca
rpc.use
ppca <- terra::predict(b, pca)
ppca
rpc.use$PCs
rpc.use$PCs$PC1
ppca$Comp.1
terra::values(rpc.use$PCs$PC1)
identical(terra::values(rpc.use$PCs$PC1), terra::values(ppca$Comp.1))
all.equal(terra::values(rpc.use$PCs$PC1), terra::values(ppca$Comp.1))
head(terra::values(rpc.use$PCs$PC1))
head(terra::values(ppca$Comp.1))
plot(rpc.use$PCs$PC1 - ppca$Comp.1)
library(terra)
plot(rpc.use$PCs$PC1 - ppca$Comp.1)
cor(rpc.use$PCs$PC1, ppca$Comp.1)
cor(terra::values(rpc.use$PCs$PC1), terra::values(ppca$Comp.1))
