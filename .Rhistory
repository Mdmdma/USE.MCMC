summary(precence.data.model)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
lapply(dimensions, function(col) invisible(hist(sampled.points[[col]], main=paste("Histogram of sampled.points", col))))
lapply(dimensions, function(col) invisible(hist(envWithPc[[col]], main=paste("Histogram of envWithPc", col))))
lapply(dimensions, function(col) invisible(hist(envWithPc[[col]], main=paste("Histogram of envWithPc", col))))
lapply(dimensions, function(col) invisible(hist(sampled.points[[col]], main=paste("Histogram of sampled.points", col))))
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load(".RData")
# Load required libraries
library(USE.MCMC)
library(terra)
library(virtualspecies)
library(sf)
library(ggplot2)
#Nedded for plotting
par(mfrow = c(1, 1))
# load data
envData <- USE.MCMC::Worldclim_tmp %>%
terra::rast( type="xyz")
sfEnvData <- envData %>%
as.data.frame(xy = TRUE) %>%
sf::st_as_sf(coords = c("x", "y"))
# Create virtual species
set.seed(153)
# Generate the environmental space using PCA
rpc <- rastPCA(envData,  stand = TRUE)
envWithPc <- rpc$PCs %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(sfEnvData)
# subsample env space to speed up the process
envWithPc <- envWithPc[runif(nrow(envWithPc)/2, 1, nrow(envWithPc)),]
dimensions <- c("PC1", "PC2", "PC3", "PC4","PC5")
# cleaned data
environmentalData <- sf::st_drop_geometry(envWithPc[dimensions])
# environment model
environmental.data.model <- mclust::densityMclust(environmentalData, plot = TRUE)
summary(environmental.data.model)
environmental.densities <- predict.densityMclust(environmental.data.model, environmentalData)
environmental.densities <- mclust::predict.densityMclust(environmental.data.model, environmentalData)
threshold <- stats::quantile(environmental.densities, 0.01)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
library(mathisRhelpers)
gm()
load_all()
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame(xy = TRUE) %>%
na.omit()
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame() %>%
na.omit()
?terra::extract
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame() %>%
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame() %>%
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame() %>%
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE)
View(virtual.precence.points.pc)
print(virtual.precence.points.pc)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf() %>%
sf::st_drop_geometry()
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.precence.points.pc), plot = TRUE)
#density Function
densityFunction <- mclustDensityFunction(envionmentalMOdel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
#density Function
densityFunction <- mclustDensityFunction(envionmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
# set sampling parameters
covariance <-0.3
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# environment model
environmental.data.model <- mclust::densityMclust(environmentalData, plot = TRUE)
summary(environmental.data.model)
environmental.densities <- mclust::predict.densityMclust(environmental.data.model, environmentalData)
threshold <- stats::quantile(environmental.densities, 0.01)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.precence.points.pc), plot = TRUE)
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
# set sampling parameters
covariance <-0.3
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.precence.points.pc[dim]), plot = TRUE)
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.precence.points.pc[dimensions]), plot = TRUE)
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
# set sampling parameters
covariance <-0.3
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.precence.points.pc[dimensions]), plot = TRUE)
virtual.precence.points.pc[dimensions]
sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions]
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
# set sampling parameters
covariance <-0.3
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
data
point
typeof(point)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
load_all()
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
load_all()
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
# set sampling parameters
covariance <-0.3
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
View(virtual.precence.points.pc)
View(environmentalData)
point <- environmentalData[1,]
point <- as.matrix(sf::st_drop_geometry(point[dim]))
point <- as.matrix(sf::st_drop_geometry(point[dimensions]))
point
mclustDensityFunction(environmentalModel = environmental.data.model, point)
densityFunction(point)
load_all()
densityFunction(point)
load_all()
View(species.model)
point <- as.matrix(sf::st_drop_geometry(point[dim]))
point <- environmentalData[1,]
point
densityFunction(point)
typeof(point)
typeof(as.matrix(point))
as.matrix(point)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
library
library(mathisRhelpers)
gm()
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
invisible(lapply(dimensions, function(col) hist(envWithPc[[col]], main=paste("Histogram of envWithPc", col))))
invisible(lapply(dimensions, function(col) hist(sampled.points[[col]], main=paste("Histogram of envWithPc", col))))
return(1 - mclust::predict.densityMclust(presenceModel, point)  * 5)
load_all()
summary
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
?plot
plot(virtual.precence.points.pc$PC1, virtual.precence.points.pc$pc2, xlim = c(min(envWithPc$PC1), max(envWithPc$PC1)),
ylim = c(min(envWithPc$PC2), max(envWithPc$PC2)) )
par(mfrow = c(1, 3))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance),
limits = list(c(min(envWithPc$PC1), max(envWithPc$PC1)), c(min(envWithPc$PC2), max(envWithPc$PC2))))
plot(envWithPc$PC1, envWithPc$PC2, main = paste("Covariance is diagonal ", covariance))
plot(virtual.precence.points.pc$PC1, virtual.precence.points.pc$pc2, xlim = c(min(envWithPc$PC1), max(envWithPc$PC1)),
ylim = c(min(envWithPc$PC2), max(envWithPc$PC2)) )
View(virtual.precence.points.pc)
plot(virtual.precence.points.pc$PC1, virtual.precence.points.pc$PC2, xlim = c(min(envWithPc$PC1), max(envWithPc$PC1)),
ylim = c(min(envWithPc$PC2), max(envWithPc$PC2)) )
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance),
limits = list(c(min(envWithPc$PC1), max(envWithPc$PC1)), c(min(envWithPc$PC2), max(envWithPc$PC2))))
plot(envWithPc$PC1, envWithPc$PC2, main = paste("Covariance is diagonal ", covariance))
plot(virtual.precence.points.pc$PC1, virtual.precence.points.pc$PC2, xlim = c(min(envWithPc$PC1), max(envWithPc$PC1)),
ylim = c(min(envWithPc$PC2), max(envWithPc$PC2)) )
par(mfrow = c(2, length(dimensions)))
par(mfrow = c(1, 3))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance),
limits = list(c(min(envWithPc$PC1), max(envWithPc$PC1)), c(min(envWithPc$PC2), max(envWithPc$PC2))))
plot(envWithPc$PC1, envWithPc$PC2, main = paste("Covariance is diagonal ", covariance))
plot(virtual.precence.points.pc$PC1, virtual.precence.points.pc$PC2, xlim = c(min(envWithPc$PC1), max(envWithPc$PC1)),
ylim = c(min(envWithPc$PC2), max(envWithPc$PC2)) )
par(mfrow = c(3, 1))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance),
limits = list(c(min(envWithPc$PC1), max(envWithPc$PC1)), c(min(envWithPc$PC2), max(envWithPc$PC2))))
plot(envWithPc$PC1, envWithPc$PC2, main = paste("Covariance is diagonal ", covariance))
plot(virtual.precence.points.pc$PC1, virtual.precence.points.pc$PC2, xlim = c(min(envWithPc$PC1), max(envWithPc$PC1)),
ylim = c(min(envWithPc$PC2), max(envWithPc$PC2)) )
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 1000)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
print(virtual.precence.points)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 10)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
?virtualspecies::sampleOccurrences
load_all()
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 10)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 10)
load_all()
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
load_all()
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
?virtualspecies::sampleOccurrences
check()
?setTxtProgressBar
?points
vcheck()
use_package("mclust")
vcheck
vcheck()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 1000)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 10000)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 10)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 1000)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 10000)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100000)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 1000)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 1000)
View(virtual.precence.points)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 1)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
summary
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
# set sampling parameters
covariance <-0.3
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
par(mfrow = c(3, 1))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance),
limits = list(c(min(envWithPc$PC1), max(envWithPc$PC1)), c(min(envWithPc$PC2), max(envWithPc$PC2))))
plot(envWithPc$PC1, envWithPc$PC2, main = paste("Covariance is diagonal ", covariance))
plot(virtual.precence.points.pc$PC1, virtual.precence.points.pc$PC2, xlim = c(min(envWithPc$PC1), max(envWithPc$PC1)),
ylim = c(min(envWithPc$PC2), max(envWithPc$PC2)) )
par(mfrow = c(2, length(dimensions)))
invisible(lapply(dimensions, function(col) hist(envWithPc[[col]], main=paste("Histogram of envWithPc", col))))
invisible(lapply(dimensions, function(col) hist(sampled.points[[col]], main=paste("Histogram of envWithPc", col))))
load_all()
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance),
limits = list(c(min(envWithPc$PC1), max(envWithPc$PC1)), c(min(envWithPc$PC2), max(envWithPc$PC2))))
plot(envWithPc$PC1, envWithPc$PC2, main = paste("Covariance is diagonal ", covariance))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance),
limits = list(c(min(envWithPc$PC1), max(envWithPc$PC1)), c(min(envWithPc$PC2), max(envWithPc$PC2))))
load_all()
plot(envWithPc$PC1, envWithPc$PC2, main = paste("Covariance is diagonal ", covariance))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance),
limits = list(c(min(envWithPc$PC1), max(envWithPc$PC1)), c(min(envWithPc$PC2), max(envWithPc$PC2))))
par(mfrow = c(3, 1))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance),
limits = list(c(min(envWithPc$PC1), max(envWithPc$PC1)), c(min(envWithPc$PC2), max(envWithPc$PC2))))
mean(v)
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
traceback()
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
use_r()
use_r("plot_density")
#' Calculate Density Values on a Grid
#'
#' @param density_func A function that takes numeric vectors as input and returns density values
#' @param data A dataframe containing the dimensions to use
#' @param dimensions A character vector of column names in the dataframe to use as dimensions
#' @param n_grid Integer specifying the number of grid points in each dimension (default: 100)
#' @param padding Numeric value to extend the grid beyond data limits as percentage (default: 0.05)
#'
#' @return A dataframe with grid points and corresponding density values
#' @export
calculate_density_grid <- function(density_func, data, dimensions, n_grid = 100, padding = 0.05) {
# Check if all dimensions exist in the data
if (!all(dimensions %in% names(data))) {
missing_dims <- dimensions[!dimensions %in% names(data)]
stop("The following dimensions are not found in the data: ",
paste(missing_dims, collapse = ", "))
}
# Check if we're working with 1D, 2D, or higher dimensions
n_dims <- length(dimensions)
if (n_dims < 1) {
stop("At least one dimension must be specified")
}
# Create grid ranges with padding
grid_ranges <- list()
for (dim in dimensions) {
range_values <- range(data[[dim]], na.rm = TRUE)
range_width <- diff(range_values)
padded_min <- range_values[1] - padding * range_width
padded_max <- range_values[2] + padding * range_width
grid_ranges[[dim]] <- seq(padded_min, padded_max, length.out = n_grid)
}
# Create grid coordinates
if (n_dims == 1) {
# 1D case
dim1 <- dimensions[1]
grid_df <- data.frame(grid_ranges[[dim1]])
names(grid_df) <- dim1
# Calculate density at each grid point
grid_df$density <- sapply(grid_df[[dim1]], function(x) {
density_func(x)
})
} else if (n_dims == 2) {
# 2D case
dim1 <- dimensions[1]
dim2 <- dimensions[2]
# Create grid mesh
grid_coords <- expand.grid(
x = grid_ranges[[dim1]],
y = grid_ranges[[dim2]]
)
names(grid_coords) <- dimensions
# Calculate density at each grid point
grid_coords$density <- apply(grid_coords, 1, function(point) {
density_func(point[1], point[2])
})
grid_df <- grid_coords
} else {
# Higher dimensions
# Create the grid as a list of sequences
grid_list <- grid_ranges
# Create all combinations of grid points
grid_coords <- expand.grid(grid_list)
# Calculate density at each grid point
grid_coords$density <- apply(grid_coords, 1, function(point) {
# Need to pass all dimensions to the density function
do.call(density_func, as.list(point))
})
grid_df <- grid_coords
}
return(grid_df)
}
calculate_density_grid(density_func = densityFunction, environmentalData, dimensions = c("PC1","PC2"))
# Extract dimension names
dim_x <- dimensions[1]
source("~/Desktop/semesterarbeit10/USE.MCMC/R/plot_density.R", echo=TRUE)
calculate_density_grid_2d(density_func = densityFunction, environmentalData, dimensions = c("PC1","PC2"))
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
View(presence.points)
View(myPres)
print(presence.points)
View(myPres)
View(myPres)
View(sampled.points)
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
View(environmental.data.model)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
use_r("mapBackOnRealPoints")
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
real.sampled.point <- sapply(sampled.points, 1, function(point) mapBackOnRealPoints(dataset, point, dimensions))
load_all()
real.sampled.point <- sapply(sampled.points, 1, function(point) mapBackOnRealPoints(dataset, point, dimensions))
real.sampled.point <- apply(sampled.points, 1, function(point) mapBackOnRealPoints(dataset, point, dimensions))
real.sampled.point <- apply(sampled.points, 1, function(point) mapBackOnRealPoints(envDataSf, point, dimensions))
load_all()
real.sampled.point <- apply(sampled.points, 1, function(point) mapBackOnRealPoints(envDataSf, point, dimensions))
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
# sample points
sampled.points <- mcmcSampling(dataset = envWithPcSf, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = envWithPcSf, dimensions = dimensions, n.sample.points = 100,
proposalFunction = proposalFunction, densityFunction = densityFunction)
par(mfrow = c(3, 1))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance),
limits = list(c(min(envWithPcSf$PC1), max(envWithPcSf$PC1)), c(min(envWithPcSf$PC2), max(envWithPcSf$PC2))))
plot_points_with_lines(sampled.points, c("PC1", "PC2", "PC3"), title = paste("Covariance is diagonal ", covariance.proposal.function),
limits = list(c(min(envWithPcSf$PC1), max(envWithPcSf$PC1)), c(min(envWithPcSf$PC2), max(envWithPcSf$PC2))))
plot(envWithPcSf$PC1, envWithPcSf$PC2, main = paste("Covariance is diagonal ", covariance.proposal.function))
plot(virtual.precence.points.pc$PC1, virtual.precence.points.pc$PC2, xlim = c(min(envWithPcSf$PC1), max(envWithPcSf$PC1)),
ylim = c(min(envWithPcSf$PC2), max(envWithPcSf$PC2)) )
par(mfrow = c(2, length(dimensions)))
invisible(lapply(dimensions, function(col) hist(envWithPcSf[[col]], main=paste("Histogram of environment", col))))
invisible(lapply(dimensions, function(col) hist(sampled.points[[col]], main=paste("Histogram of sampled points", col))))
sampled.point <- apply(sampled.points, 1, function(point) mapBackOnRealPoints(envDataSf, point, dimensions))
View(sampled.point)
sp <- unlist(sampled.point)
sp
real.sampled.points <- do.call(rbind, sampled.point)
View(real.sampled.points)
