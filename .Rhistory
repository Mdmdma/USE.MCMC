outdf$Date <- rep(seq.Date(as.Date(str),as.Date(str)+dd-1, by="day"),4)
outdf$Date <- rep(seq.Date(as.Date(mystart),as.Date(mystart)+dd-1, by="day"),4)
outdf %>%
mutate(myStage=factor(myStage, levels= c('Egg', 'Diapausing egg', 'Juvenile', 'Adult'))) %>%
ggplot( aes(y=(`50%`),x=Date, group=factor(myStage),col=factor(myStage))) +
ggtitle("Ae. albopictus Interquantile range abundance")+
geom_line(linewidth=1.2)+
geom_ribbon(aes(ymin=`25%`,ymax=(`75%`),fill=factor(myStage)),
col="white",
alpha=0.2,
outline.type="full")+
labs(x="Date", y="Interquantile range abundance", col="Stage", fill="Stage")+
facet_wrap(~myStage, scales = "free")+
theme_light()+
theme(legend.pos="bottom",  text = element_text(size=14) , strip.text = element_text(face = "italic"))
mystart<-"2019-01-01"
myend <- "2019-12-31"
simout <- dynamAedes.m(
species = "albopictus",
intro.eggs = 0,
intro.deggs = 1000,
intro.adults = 0,
intro.juveniles = 0,
scale = "rg",
jhwv = 130,
temps.matrix = temp_1000_pure,
startd = mystart,
endd = myend,
cells.coords = ID_Coordinate,
iter = 1,
n.clusters = 3,
compressed.output = TRUE,
verbose = TRUE
)
#psi output
raster_output <- psi_sp(input_sim = simout, coords = ID_Coordinate,
eval_date = 150, n.clusters = 1)
plot(raster_output)
# abundance
dd <- max(sapply(simout, function(x) length(x)))#retrieve the maximum number of simulated days
egg <- as.data.frame(adci(simout, eval_date=1:dd, breaks=c(0.25,0.50,0.75), st=1))
juv <- as.data.frame(adci(simout, eval_date=1:dd, breaks=c(0.25,0.50,0.75), st=2))
ad <- as.data.frame(adci(simout, eval_date=1:dd, breaks=c(0.25,0.50,0.75), st=3))
eggd <- as.data.frame(adci(simout, eval_date=1:dd, breaks=c(0.25,0.50,0.75), st=4))
egg$myStage <-'Egg'
juv$myStage <- 'Juvenile'
ad$myStage <- 'Adult'
eggd$myStage <- 'Diapausing egg'
outdf <- bind_rows(egg, juv, ad, eggd) %>%
as_tibble()
outdf$Date <- rep(seq.Date(as.Date(mystart),as.Date(mystart)+dd-1, by="day"),4)
outdf %>%
mutate(myStage=factor(myStage, levels= c('Egg', 'Diapausing egg', 'Juvenile', 'Adult'))) %>%
ggplot( aes(y=(`50%`),x=Date, group=factor(myStage),col=factor(myStage))) +
ggtitle("Ae. albopictus Interquantile range abundance")+
geom_line(linewidth=1.2)+
geom_ribbon(aes(ymin=`25%`,ymax=(`75%`),fill=factor(myStage)),
col="white",
alpha=0.2,
outline.type="full")+
labs(x="Date", y="Interquantile range abundance", col="Stage", fill="Stage")+
facet_wrap(~myStage, scales = "free")+
theme_light()+
theme(legend.pos="bottom",  text = element_text(size=14) , strip.text = element_text(face = "italic"))
outdf %>%
mutate(myStage=factor(myStage, levels= c('Egg', 'Diapausing egg', 'Juvenile', 'Adult'))) %>%
ggplot( aes(y=log10(`50%` + 1),x=Date, group=factor(myStage),col=factor(myStage))) +
ggtitle("Ae. albopictus Interquantile range abundance")+
geom_line(linewidth=1.2)+
geom_ribbon(aes(ymin=log10(`25%`+1),ymax=log10(`75%`+1),fill=factor(myStage)),
col="white",
alpha=0.2,
outline.type="full")+
labs(x="Date", y="Interquantile range abundance (Log10)", col="Stage", fill="Stage")+
facet_wrap(~myStage, scales = "free")+
theme_light()+
theme(legend.pos="bottom",  text = element_text(size=14) , strip.text = element_text(face = "italic"))
#psi output
raster_output <- psi_sp(input_sim = simout, coords = ID_Coordinate,
eval_date = 180, n.clusters = 1)
plot(raster_output)
ID_Coordinate
myrast<-cbind.data.frame(ID_Coordinate, temp=temp_1000_pure$Temperature_20191_1)
head(myrast)
myrast<-raster::rasterFromXYZ(myrast)
myrast
plot(myrast/1000)
intro.prop <- 1000
it <- 5
names(temp_1000_pure)
myrast<-cbind.data.frame(ID_Coordinate, temp=temp_1000_pure$Temperature_20191_180)
myrast<-raster::rasterFromXYZ(myrast)
plot(myrast/1000)
# myrast<-cbind.data.frame(ID_Coordinate, temp=temp_1000_pure$Temperature_20191_180)
myrast<-cbind.data.frame(ID_Coordinate, temp=temp_1000_pure)
myrast<-raster::rasterFromXYZ(myrast)
myrast
myrast<-myrast/1000
myrast.mean<-raster::calc(myrast, 'mean')
myrast.mean<-raster::calc(myrast, fun = 'mean')
myrast<-stack(raster::rasterFromXYZ(myrast))
library(raster)
myrast<-stack(raster::rasterFromXYZ(myrast))
myrast<-raster::rasterFromXYZ(myrast)
# myrast<-cbind.data.frame(ID_Coordinate, temp=temp_1000_pure$Temperature_20191_180)
myrast<-cbind.data.frame(ID_Coordinate, temp=temp_1000_pure)
myrast<-raster::rasterFromXYZ(myrast)
stack(myrast)
myrast.mean<-raster::calc(stack(myrast), fun = 'mean')
myrast.mean <- calc(myrast, fun = mean, na.rm = T)
myrast.mean
myrast<-myrast/1000
myrast.mean <- calc(myrast, fun = mean, na.rm = T)
myrast.sd <- calc(myrast, fun = sd, na.rm = T)
plot(myrast.mean)
plot(myrast.cv)
myrast.cv<- myrast.sd/myrast.mean
plot(myrast.cv)
myrast.mean
plot(myrast.mean)
plot(raster_output)
#Spatial psi output
raster_output <- psi_sp(input_sim = simout, coords = ID_Coordinate,
eval_date = 10, n.clusters = 1)
plot(raster_output)
#Spatial psi output
raster_output <- psi_sp(input_sim = simout, coords = ID_Coordinate,
eval_date = 80, n.clusters = 1)
plot(raster_output)
#Spatial psi output
raster_output <- psi_sp(input_sim = simout, coords = ID_Coordinate,
eval_date = 100, n.clusters = 1)
plot(raster_output)
#Spatial psi output
raster_output <- psi_sp(input_sim = simout, coords = ID_Coordinate,
eval_date = 150, n.clusters = 1)
plot(raster_output)
#Spatial psi output
raster_output <- psi_sp(input_sim = simout, coords = ID_Coordinate,
eval_date = 140, n.clusters = 1)
plot(raster_output)
plot(myrast.mean)
knitr::opts_chunk$set(echo = TRUE,
dev = 'pdf',
out.width = "100%")
setwd("/home/ddare/working_files/ENM_MR/SEM/script/")
# webshot::install_phantomjs()
rescale <- function(x, x.min = NULL, x.max = NULL, new.min = 0, new.max = 1) {
if(is.null(x.min)) x.min = min(x)
if(is.null(x.max)) x.max = max(x)
new.min + (x - x.min) * ((new.max - new.min) / (x.max - x.min))
}
library(tidyverse)
library(ggplot2)
library(virtualspecies)
library(raster)
library(knitr)
Worldclim <- raster::getData('worldclim', var='bio', res = 10)
envData <- crop(Worldclim, extent(-12, 25, 36, 60))
b <- as(extent(envData), "SpatialPolygons")
rm(Worldclim)
my.parameters <- formatFunctions(bio1 = c(fun = 'dnorm', mean = 100, sd = 400),
bio12 = c(fun = 'dnorm', mean = 2000, sd = 4000))
my.first.species <- generateSpFromFun(raster.stack = envData[[c("bio1", "bio12")]],
parameters = my.parameters,
plot = FALSE)
plot(my.first.species$suitab.raster, main = "Virtual tree \n climatic suitability")
fake_tree_suitab <- seq(0,1, by = 0.01)
a <- 1
g.r <- 1.5
shade.germ <- a*exp(g.r*fake_tree_suitab)
shade.germ <- rescale(shade.germ,
x.min = min(shade.germ),
x.max = max(shade.germ),
new.min = 0, new.max = 1)
plot(fake_tree_suitab,
shade.germ,
xlab = "Virtual tree climatic suitability",
ylab = "Germination rate")
shade.germ.r <- a*exp(g.r*my.first.species$suitab.raster)
shade.germ.r <- rescale(shade.germ.r, x.min = 1, x.max = 5, new.min = 0, new.max = 1)
plot(shade.germ.r, main = "Germination rate of the virtual herb species")
my.parameters <- formatFunctions(bio1 = c(fun = 'dnorm', mean = 12, sd = 500),
bio12 = c(fun = 'dnorm', mean = 1200, sd = 2000))
my.second.species <- generateSpFromFun(raster.stack = envData[[c("bio1", "bio12")]],
parameters = my.parameters,
formula = "bio1 + bio12",
plot = FALSE)
plot(my.second.species$suitab.raster,
main = "Virtual herbaceous plant \n climatic suitability")
par(oma=c(3,3,3,3))
plotResponse(my.first.species)
title(sub = "Virtual tree species")
par(oma=c(3,3,3,3))
plotResponse(my.second.species)
title(sub = "Virtual herbaceous species")
tmp <- shade.germ.r*my.second.species$suitab.raster
tmp <- rescale(tmp,  x.min = 0, x.max = 0.66, new.min = 0, new.max = 1)
my.second.species$suitab.raster <- tmp
par(mfrow=c(2,2))
plot(my.first.species$suitab.raster, main = "Virtual tree climatic suitability")
plot(my.second.species$suitab.raster, main = "Virtual herb climatic suitability")
plot(shade.germ.r, main = "Germination probability of the \n herbaceous virtual species")
plot(my.second.species$suitab.raster, main = "Virtual herb habitat suitability")
par(mfrow=c(1,1))
new.pres.tree <- convertToPA(x = my.first.species,
beta="random",
alpha = -0.05, plot = FALSE,
species.prevalence = 0.4)
geog.prev <- c(0.1, 0.5, 0.9)
new.pres.herb <- lapply(geog.prev, function(y){convertToPA(x = my.second.species, beta="random", alpha = -0.05, plot = FALSE, species.prevalence = y)})
names(new.pres.herb) <- paste0("geog.prev_", geog.prev)
noise.rast<-new.pres.tree$pa.raster
raster::values(noise.rast)<-rbinom(ncell(noise.rast), 1, 0.5)
plot(noise.rast, main = 'Random noise layer')
# new.pres.tree$pa.raster<- new.pres.tree$pa.raster*noise.rast
for (i in 1:length(new.pres.herb)){
tmp<-new.pres.herb[[i]]$pa.raster*noise.rast
new.pres.herb[[i]]$pa.raster<-tmp
}
par(mfrow=c(2,2))
plot(new.pres.tree$pa.raster, main = "Virtual tree species \n (geog. prev = 0.4)", legend = FALSE)
plot(new.pres.herb$geog.prev_0.1$pa.raster, main = "Virtual herbaceous species  \n (geog. prev = 0.1)")
plot(new.pres.herb$geog.prev_0.5$pa.raster, main = "Virtual herbaceous species  \n (geog. prev = 0.5)")
plot(new.pres.herb$geog.prev_0.9$pa.raster, main = "Virtual herbaceous species  \n (geog. prev = 0.9)")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(new.pres.tree$pa.raster, main = "Virtual tree species \n (geog. prev = 0.4)", legend = FALSE)
plot(new.pres.herb$geog.prev_0.1$pa.raster, main = "Virtual herbaceous species  \n (geog. prev = 0.1)")
plot(new.pres.herb$geog.prev_0.5$pa.raster, main = "Virtual herbaceous species  \n (geog. prev = 0.5)")
plot(new.pres.herb$geog.prev_0.9$pa.raster, main = "Virtual herbaceous species  \n (geog. prev = 0.9)")
par(mfrow=c(1,1))
library(dismo)
library(piecewiseSEM)
library(semEff)
train.perc <- 0.7
{set.seed(123)
randpts <- sampleRandom(envData$bio1, size =  1000, sp = TRUE)}
names(randpts)<-"train"
randpts$train<-ifelse(runif(nrow(randpts))<train.perc, 1, 0)
crs(randpts) <- crs(new.pres.tree$pa.raster)
# Stack variabels
pred.stack<-lapply(1:length(new.pres.herb), function(x){stack(envData$bio1, envData$bio12,
shade.germ.r, new.pres.tree$pa.raster,
new.pres.herb[[x]]$pa.raster,
new.pres.herb$geog.prev_0.1$suitab.raster)})
# lapply non mi funzia, per ora faccio questa cosa orribile
# lapply(1:length(pred.stack), function(x){names(pred.stack[[x]]) <- c("bio1", "bio12", "herb.germ", "tree.pa",  "herb.pa"  )})
names(pred.stack[[1]])<-c("bio1", "bio12", "herb.germ", "tree.pa",  "herb.pa", "obs.herb.suit")
names(pred.stack[[2]])<-c("bio1", "bio12", "herb.germ", "tree.pa",  "herb.pa", "obs.herb.suit")
names(pred.stack[[3]])<-c("bio1", "bio12", "herb.germ", "tree.pa",  "herb.pa", "obs.herb.suit")
names(pred.stack)
# lapply non mi funzia, per ora faccio questa cosa orribile
# lapply(1:length(pred.stack), function(x){names(pred.stack[[x]]) <- c("bio1", "bio12", "herb.germ", "tree.pa",  "herb.pa"  )})
names(pred.stack[[1]])<-c("bio1", "bio12", "herb.germ", "tree.pa",  "herb.pa", "obs.herb.suit")
names(pred.stack[[2]])<-c("bio1", "bio12", "herb.germ", "tree.pa",  "herb.pa", "obs.herb.suit")
names(pred.stack[[3]])<-c("bio1", "bio12", "herb.germ", "tree.pa",  "herb.pa", "obs.herb.suit")
pred.stack
# Extract variables and scaling them
dat <- lapply(pred.stack, function(x){cbind.data.frame(train=randpts$train, raster::extract(x, randpts, df = TRUE ))})
dat.sc <- lapply(dat, function(x){data.frame(train=x[,1], scale(x[,3:5], center = TRUE, scale = TRUE), x[, 6:8])})
names(dat.sc) <-geog.prev
dat.sc
vs.semList<-list()
for(i in 1:length(dat.sc)) {
# i=1
tmp.df <- subset(dat.sc[[i]], train==1) # select training dataset
tmp.df$bio1.2<-tmp.df$bio1^2
tmp.df$bio12.2<-tmp.df$bio12^2
vs.sem <- list(tree.pa = glm(tree.pa ~ bio1 + bio1.2 + bio12 + bio12.2 , family = binomial, data =tmp.df),
herb.germ = glm(herb.germ ~ bio1 + bio12 + tree.pa,  data = tmp.df),
herb.pa = glm(herb.pa ~ bio1 +bio1.2  + bio12  + bio12.2 + herb.germ + tree.pa, family = binomial, data = tmp.df)
)
vs.semList[[i]]<-vs.sem
}
names(vs.semList)<-paste0("geog.prev", geog.prev)
# Network visualization
# plot(piecewiseSEM::as.psem(vs.semList$geog.prev0.1$fold1, Class = "psem"))
lapply(1:length(geog.prev), function(x){plot(piecewiseSEM::as.psem(vs.semList[[x]], Class = "psem"))})
# Note that you can also plot the causal diagram with a "tree" shape
# piecewiseSEM:::plot.psem(
#   piecewiseSEM::as.psem(vs.sem, Class = "psem"), #the values are the standardized estimates
#   node_attrs = data.frame(shape = "rectangle", color = "black", fillcolor = "grey"),
#   layout = "tree"
# )
# devtools::install_github("mattmar/dynamAedes")
library(raster)
library(dynamAedes)
ID_Coordinate<-read.csv("/home/ddare/Downloads/ID_Coords.csv")
#---- Outputs postporcessing ----
simout<-readRDS("/home/ddare/Downloads/alboGermany.RDS")
mystart <- "2019-01-01"
myend <- "2019-12-31"
intro.prop <- 1000
it <- 10
ncores <- 5
# Overall abundance plot
dd <- max(sapply(simout, function(x) length(x)))#retrieve the maximum number of simulated days
dd
egg <- as.data.frame(adci(simout, eval_date=1:dd, breaks=c(0.25,0.50,0.75), st=1))
egg
?adci
juv <- as.data.frame(adci(simout, eval_date=1:dd, breaks=c(0.25,0.50,0.75), stage = 2, n.clusters = ncores))
ad <- as.data.frame(adci(simout, eval_date=1:dd, breaks=c(0.25,0.50,0.75), stage = 3, n.clusters = ncores))
eggd <- as.data.frame(adci(simout, eval_date=1:dd, breaks=c(0.25,0.50,0.75), stage = 4, n.clusters = ncores))
egg$myStage <-'Egg'
juv$myStage <- 'Juvenile'
ad$myStage <- 'Adult'
eggd$myStage <- 'Diapausing egg'
outdf <- bind_rows(egg, juv, ad, eggd) %>%
as_tibble()
outdf <- rbind(egg, juv, ad, eggd)
outdf$Date <- rep(seq.Date(as.Date(mystart),as.Date(mystart)+dd-1, by="day"),4)
outdf %>%
mutate(myStage=factor(myStage, levels= c('Egg', 'Diapausing egg', 'Juvenile', 'Adult'))) %>%
ggplot( aes(y=log10(`50%` + 1),x=Date, group=factor(myStage),col=factor(myStage))) +
ggtitle("Ae. albopictus Interquantile range abundance")+
geom_line(linewidth=1.2)+
geom_ribbon(aes(ymin=log10(`25%`+1),ymax=log10(`75%`+1),fill=factor(myStage)),
col="white",
alpha=0.2,
outline.type="full")+
labs(x="Date", y="Interquantile range abundance (Log10)", col="Stage", fill="Stage")+
facet_wrap(~myStage, scales = "free")+
theme_light()+
theme(legend.pos="bottom",  text = element_text(size=14) , strip.text = element_text(face = "italic"))
library(dplyr)
outdf %>%
mutate(myStage=factor(myStage, levels= c('Egg', 'Diapausing egg', 'Juvenile', 'Adult'))) %>%
ggplot( aes(y=log10(`50%` + 1),x=Date, group=factor(myStage),col=factor(myStage))) +
ggtitle("Ae. albopictus Interquantile range abundance")+
geom_line(linewidth=1.2)+
geom_ribbon(aes(ymin=log10(`25%`+1),ymax=log10(`75%`+1),fill=factor(myStage)),
col="white",
alpha=0.2,
outline.type="full")+
labs(x="Date", y="Interquantile range abundance (Log10)", col="Stage", fill="Stage")+
facet_wrap(~myStage, scales = "free")+
theme_light()+
theme(legend.pos="bottom",  text = element_text(size=14) , strip.text = element_text(face = "italic"))
library(ggplot2)
outdf %>%
mutate(myStage=factor(myStage, levels= c('Egg', 'Diapausing egg', 'Juvenile', 'Adult'))) %>%
ggplot( aes(y=log10(`50%` + 1),x=Date, group=factor(myStage),col=factor(myStage))) +
ggtitle("Ae. albopictus Interquantile range abundance")+
geom_line(linewidth=1.2)+
geom_ribbon(aes(ymin=log10(`25%`+1),ymax=log10(`75%`+1),fill=factor(myStage)),
col="white",
alpha=0.2,
outline.type="full")+
labs(x="Date", y="Interquantile range abundance (Log10)", col="Stage", fill="Stage")+
facet_wrap(~myStage, scales = "free")+
theme_light()+
theme(legend.pos="bottom",  text = element_text(size=14) , strip.text = element_text(face = "italic"))
saveRDS(outdf, "/home/ddare/Downloads/alboGermany_abundance.RDS")
library(raster)
library(ncdf4)
b<-brick("/home/ddare/Downloads/dataset-insitu-gridded-observations-europe-f52b5114-1fe1-4152-a90a-a5143a72cf85/tg_ens_mean_0.25deg_reg_2011-2021_v25.0e.nc")
b
plot(b$X2011.01.01)
library(raster)
r<-raster("Downloads/GEBCO_15_Mar_2023_66bc284ec60e/gebco_2022_n47.0_s29.0_w-10.0_e37.0.tif")
library(rasterVis)
plot3D(r)
r2<-r
r2[r2>0]<-0
plot3D(r2)
writeRaster(r2, "/home/ddare/Downloads/GEBCO_15_Mar_2023_66bc284ec60e/batim_belowZeroasl.tif")
#---- 5. Export .stl ----
source('/home/ddare/Documents/DanieleDaRe/OtherProjects/Dolomitisch/r2stl_1.0.0/r2stl/R/r2stl.r')
# Now let's look at R's Volcano data
z <- volcano
x <- 1:dim(volcano)[1]
y <- 1:dim(volcano)[2]
# Now let's look at R's Volcano data
z <- volcano
x <- 1:dim(volcano)[1]
y <- 1:dim(volcano)[2]
r2stl(x, y, z, filename="/home/ddare/Downloads/volcano.stl", show.persp=TRUE)
# fingertips
library(dolomitisch)
library(raster)
library(rasterVis)
library(mapview)
library(sf)
#---- Mirage, tre cime, scala 1:25.000, diametro 1 m ----
treCime<-st_read("/home/ddare/Documents/DanieleDaRe/OtherProjects/Dolomitisch/quadranti/shapefiles/tre_cime_loc.shp")
dem<-raster("/home/ddare/Documents/DanieleDaRe/OtherProjects/Dolomitisch/quadranti/rasters/10m/w51575_s10/w51575_s10.tif")
# select aoi
location_name <- "TreCime"
100*10
# select aoi
location_name <- "TreCime"
tolerance <- 15 # (mm) margine conservativo
myRad <-500 #(mm)
myArea<-aoi(xmin=st_coordinates(treCime)[1], ymin=st_coordinates(treCime)[2],
radius=myRad,
scale=myScale, method = "buffer")
myScale <- 25000
myArea<-aoi(xmin=st_coordinates(treCime)[1], ymin=st_coordinates(treCime)[2],
radius=myRad,
scale=myScale, method = "buffer")
plot(dem)
plot(treCime, add=T)
plot(myArea, add=T)
dem<-list("/home/ddare/Documents/DanieleDaRe/OtherProjects/Dolomitisch/quadranti/rasters/10m/w51570_s10/w51570_s10.tif",
"/home/ddare/Documents/DanieleDaRe/OtherProjects/Dolomitisch/quadranti/rasters/10m/w51575_s10/w51575_s10.tif")
# "/home/ddare/Documents/DanieleDaRe/OtherProjects/Dolomitisch/quadranti/rasters/10m/w51070_s10/w51070_s10.tif")
dem<-lapply(dem, raster)
dem$fun <- median
dem <- do.call(mosaic, dem)
#------USE-----------------
setwd("/home/ddare/GitHub/USE/")
# token "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"
# token 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
library(devtools)
library(roxygen2)
library(usethat)
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
#check everything is ok for the CRAN
devtools::check()
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
#check everything is ok for the CRAN
devtools::check()
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
#check everything is ok for the CRAN
devtools::check()
# Sys.setlocale("LC_ALL", "English")
library(geodata)
library(USE)
library(terra)
library(raster)
library(virtualspecies)
library(sf)
library(ggplot2)
#------USE-----------------
setwd("/home/ddare/GitHub/USE/")
# token "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"
# token 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
library(devtools)
library(roxygen2)
library(usethat)
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
#check everything is ok for the CRAN
devtools::check()
#create vignette
# usethis::use_vignette("USE_vignette")
tools::buildVignette()
#create vignette
# usethis::use_vignette("USE_vignette")
tools::buildVignette("vignettes/USE_vignette.Rmd")
remove.packages("USE")
#install package
devtools::install(".")
library(USE)
#website
# devtools::install_github('r-lib/pkgdown')
library(pkgdown)
# Run to build the website
pkgdown::build_site("/home/ddare/GitHub/USE/", install = FALSE,
examples = FALSE)
# Sys.setlocale("LC_ALL", "English")
library(geodata)
library(USE)
library(terra)
library(raster)
library(virtualspecies)
library(sf)
library(ggplot2)
envData <- USE::Worldclim_tmp
rpc <- rastPCA(envData, stand = TRUE)
rpc$call
rpc$pca
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
#install package
devtools::install(".")
# Run to build the website
pkgdown::build_site("/home/ddare/GitHub/USE/", install = FALSE,
examples = FALSE)
?lm
?dynamAedes.m
??dynamAedes.m
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
#install package
devtools::install(".")
# Run to build the website
pkgdown::build_site("/home/ddare/GitHub/USE/", install = FALSE,
examples = FALSE)
