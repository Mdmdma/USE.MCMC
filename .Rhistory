axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
p<-ggplot() +
geom_stars(data=st_as_stars(mosqu/h))+
scale_fill_viridis(option="rocket", direction=-1,
oob = scales::squish, na.value="transparent", limits=c(0,300))+
labs(x="",y="", fill="Mosquito-to-host ratio")+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
p<-ggplot() +
geom_stars(data=st_as_stars(mosqu/h))+
scale_fill_viridis(option="rocket", direction=-1,
oob = scales::squish, na.value="transparent", limits=c(0,300))+
labs(x="",y="", fill="Mosquito-to-host ratio")+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
outname=paste0(getwd(), "/m2host_250m_", Sys.Date(), ".pdf")
ggsave(p, filename = outname, width = 20, height = 15, device='pdf', dpi=320)
#---- R0 250m maps ----
h
mosqu
b.rate
m.rate
sT
tmp_R0<-R0_estim(LHS_param=Y[1:100,],
temperature= sT,
Nv= mosqu, Nh= h,
breaks=c(0.025,0.50,0.975),
n.clusters = 5,
compound = TRUE, geom.mean = TRUE)
tmp_R0
p<-ggplot() +
geom_stars(data=st_as_stars(tmp_R0$`0.5`))+
scale_fill_viridis(option="rocket", direction=-1, limits=c(0,1.5),
oob = scales::squish, na.value="transparent")+
labs(x="",y="", fill="R0")+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
ro_250_ci<-stack(tmp_R0)
names(ro_250_ci)<-c("CI2.5", "Median", "CI97.5")
ro_250_ci<-ro_250_ci[[c(2,1,3)]]
# ro_250_ci<-ro_250_ci+0.4
plot(ro_250_ci)
p<-ggplot() +
geom_stars(data=st_as_stars(ro_250_ci))+
scale_fill_viridis(option="rocket", direction=-1, limits=c(0,1.5),
oob = scales::squish, na.value="transparent")+
labs(x="",y="", fill="R0")+
facet_wrap(~band)+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
#---- R0 1km maps ----
#temperature
sT_1km<-aggregate(sT, fact=4, fun=mean)
p<-ggplot() +
geom_stars(data=st_as_stars(sT_1km))+
scale_fill_viridis(option="inferno",  direction=-1, limits=c(20,30),
oob = scales::squish, na.value="transparent")+
labs(x="",y="", fill="Temperature (°C)")+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
outname=paste0(getwd(), "/temp_graph1km_", Sys.Date(), ".pdf")
#---- R0 1km maps ----
#temperature
sT_1km<-aggregate(sT, fact=4, fun=mean)
p<-ggplot() +
geom_stars(data=st_as_stars(sT_1km))+
scale_fill_viridis(option="inferno",  direction=-1, limits=c(20,30),
oob = scales::squish, na.value="transparent")+
labs(x="",y="", fill="Temperature (°C)")+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
#human density
h_1km<-aggregate(h, fact=4, fun=mean)
p<-ggplot() +
geom_stars(data=st_as_stars(h_1km))+
scale_fill_viridis(option="viridis",limits=c(200, 1000),
oob = scales::squish, na.value="transparent")+
labs(x="",y="", fill="Human density (humans/km2)")+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
#mosquito density
mosqu_1km<-aggregate(mosqu, fact=4, fun=mean)
p<-ggplot() +
geom_stars(data=st_as_stars(mosqu_1km))+
scale_fill_viridis(option="viridis",  limits=c(4000,10000),
oob = scales::squish, na.value="transparent")+
labs(x="",y="", fill="Mosquito density (mosquitoes/km2)")+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
mosqu_1km/h_1km
p<-ggplot() +
geom_stars(data=st_as_stars(mosqu_1km/h_1km))+
scale_fill_viridis(option="rocket", direction=-1,
oob = scales::squish, na.value="transparent", limits=c(0,50))+
labs(x="",y="", fill="Mosquito-to-host ratio")+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
p<-ggplot() +
geom_stars(data=st_as_stars(mosqu_1km/h_1km))+
scale_fill_viridis(option="rocket", direction=-1,
oob = scales::squish, na.value="transparent", limits=c(0,300))+
labs(x="",y="", fill="Mosquito-to-host ratio")+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
outname=paste0(getwd(), "/m2host_1000m_", Sys.Date(), ".pdf")
ggsave(p, filename = outname, width = 20, height = 15, device='pdf', dpi=320)
h
#---- R0 mismatched resolution: high sr mosq and low sr h----
mosqu_1km
#---- R0 mismatched resolution: low sr mosq and high sr h----
mosqu_1km
h
#---- R0 mismatched resolution: low sr mosq and high sr h----
mosqu_1km.rsp<-mosqu_1km
h
res(mosqu_1km.rsp)<-c(250,250)
mosqu_1km.rsp/h
p<-ggplot() +
geom_stars(data=st_as_stars(mosqu_1km.rsp/h))+
scale_fill_viridis(option="rocket", direction=-1,
oob = scales::squish, na.value="transparent", limits=c(0,300))+
labs(x="",y="", fill="Mosquito-to-host ratio")+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
mosqu_1km.rsp/h
outname=paste0(getwd(), "/m2host_h1000_m250_", Sys.Date(), ".pdf")
ggsave(p, filename = outname, width = 20, height = 15, device='pdf', dpi=320)
#R0 estimates
tmp_R0_mis<-R0_estim(LHS_param=Y[1:200,],
temperature= sT,
Nv= mosqu_1km.rsp, Nh= h,
breaks=c(0.025,0.50,0.975),
n.clusters = 5,
compound = TRUE, geom.mean = TRUE)
tmp_R0_mis_ci<-stack(tmp_R0_mis)
#R0 estimates
tmp_R0_mis<-R0_estim(LHS_param=Y[1:200,],
temperature= sT,
Nv= mosqu_1km.rsp, Nh= h,
breaks=c(0.025,0.50,0.975),
n.clusters = 5,
compound = TRUE, geom.mean = TRUE)
R0_mis_ci<-stack(tmp_R0_mis)
ro_mis_ci<-stack(tmp_R0_mis)
names(ro_1km_ci)<-c("CI2.5", "Median", "CI97.5")
ro_mis_ci<-stack(tmp_R0_mis)
names(ro_mis_ci)<-c("CI2.5", "Median", "CI97.5")
ro_1km_ci<-ro_mis_ci[[c(2,1,3)]]
plot(ro_1km_ci)
p<-ggplot() +
geom_stars(data=st_as_stars(ro_mis_ci))+
scale_fill_viridis(option="rocket", direction=-1, limits=c(0,1.5),
oob = scales::squish, na.value="transparent")+
labs(x="",y="", fill="R0")+
facet_wrap(~band)+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
ro_mis_ci
outname=paste0(getwd(), "/r0_ci_m1000_h250_", Sys.Date(), ".pdf")
ggsave(p, filename = outname, width = 20, height = 15, device='pdf', dpi=320)
#---- R0 mismatched resolution: high sr mosq and low sr h----
h_1km.rsp<-h_1km
p<-ggplot() +
geom_stars(data=st_as_stars(mosqu/h_1km.rsp))+
scale_fill_viridis(option="rocket", direction=-1,
oob = scales::squish, na.value="transparent", limits=c(0,300))+
labs(x="",y="", fill="Mosquito-to-host ratio")+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
#---- R0 mismatched resolution: high sr mosq and low sr h----
h_1km.rsp<-h_1km
res(h_1km.rsp)<-c(250,250)
h_1km.rsp
p<-ggplot() +
geom_stars(data=st_as_stars(mosqu/h_1km.rsp))+
scale_fill_viridis(option="rocket", direction=-1,
oob = scales::squish, na.value="transparent", limits=c(0,300))+
labs(x="",y="", fill="Mosquito-to-host ratio")+
theme_light()+
theme(legend.position = "bottom",
text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
size = guide_legend(title.position="top", title.hjust = 0.5))+
coord_equal()
p
outname=paste0(getwd(), "/m2host_h250_m1000_", Sys.Date(), ".pdf")
ggsave(p, filename = outname, width = 20, height = 15, device='pdf', dpi=320)
h_1km
plot(mosqu)
plot(h_1km.rsp)
plot(h_1km)
#---- R0 mismatched resolution: high sr mosq and low sr h----
h_1km.rsp<-h_1km
h_1km.rsp
res(h_1km.rsp)<-c(250,250)
plot(h_1km.rsp)
plot(mosqu_1km.rsp)
getwd()
#---- R0 mismatched resolution: low sr mosq and high sr h----
mosqu_1km.rsp<-mosqu_1km
plot(mosqu_1km.rsp)
res(mosqu_1km.rsp)<-c(250,250)
plot(mosqu_1km.rsp)
# token "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"
library(devtools)
library(roxygen2)
library(usethat)
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
#------USE-----------------
setwd("/home/ddare/GitHub/USE/")
# token "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"
# token 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
library(devtools)
library(roxygen2)
library(usethat)
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
Sys.setlocale("LC_ALL", "English")
library(USE)
library(raster)
library(virtualspecies)
library(RStoolbox)
# library(sf)
myCRS<-"+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
Worldclim <- geodata::worldclim_global(var='bio', res=10, path='/home/ddare/Downloads/')
envData <- terra::crop(Worldclim, terra::ext(-12, 25, 36, 60))
#create virtual species
myRandNum <- sample(1:19,size=5, replace = FALSE)
random.sp <- virtualspecies::generateRandomSp(stack(envData[[myRandNum]]),
convert.to.PA = FALSE,
species.type = "additive",
realistic.sp = TRUE,
plot = FALSE)
#reclassify suitability raster using a probability conversion rule
new.pres <- virtualspecies::convertToPA(x=random.sp,
beta=0.55,
alpha = -0.05, plot = FALSE)
#Sample true occurrences
presence.points <- virtualspecies::sampleOccurrences(new.pres,
n = 300, # The number of points to sample
type = "presence-absence",
sample.prevalence = 0.6,
detection.probability = 1,
correct.by.suitability = TRUE,
plot = TRUE)
myPres <- presence.points$sample.points[which(presence.points$sample.points$Observed==1), c( "x", "y",  "Observed")]
myPres <- st_as_sf(myPres, coords=c("x", "y"), crs=4326)
Sys.setlocale("LC_ALL", "English")
library(USE)
library(raster)
library(virtualspecies)
library(RStoolbox)
library(sf)
myCRS<-"+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
myPres <- presence.points$sample.points[which(presence.points$sample.points$Observed==1), c( "x", "y",  "Observed")]
myPres <- st_as_sf(myPres, coords=c("x", "y"), crs=4326)
rpc <- RStoolbox::rasterPCA(stack(envData[[myRandNum]]), spca = TRUE)
dt <- na.omit(as.data.frame(rpc$map[[c("PC1", "PC2")]], xy = TRUE))
dt <- sf::st_as_sf(dt, coords = c("PC1", "PC2"))
myRes <- list()
myRes$Opt_res <- 7
myObs <- USE::uniformSampling(sdf=dt,
grid.res=myRes$Opt_res,
n.tr = 5,
sub.ts = TRUE,
n.ts = 2,
plot_proc = FALSE)
myObs
myRandNum
Worldclim_tmp<-Worldclim[[ c(4,  3, 14,  9, 15)]]
Worldclim_tmp
usethis::use_data(Worldclim_tmp)
names(Worldclim_tmp)
geodata::worldclim_global(var='bio', res=10, path='/home/ddare/Downloads/')[c(1,2,3)]
geodata::worldclim_global(var='bio', res=10, path='/home/ddare/Downloads/')[[c(1,2,3)]]
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
USE::Worldclim_tmp
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
data(Worldclim_tmp)
