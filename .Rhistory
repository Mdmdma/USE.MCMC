e1 + 1
} else {
e1
}
}
1+1
(1+1)
()
(()
(
)
replicate(50, (1 + 2))
print(()
print(`(`)
(1+1)
(1+1)¨
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
(1+1)
rm(`(`)
ls
replicate(50, (1 + 1))
`(` <- function(x) x+1
(1)
print(`(`)
(FALSE)
`(` <- function(x) if (is.numeric(x) x+1
`(` <- function(x) if (is.numeric(x)) x+1
(FALSE)
print(FALSE)
`(` <- function(x) x+1
print(FALSE)
print((FALSE))
`modify<-` <- function(x, position, value) {
x[position] <- value
x
}
modify(x, 1) <- 10
x
#>  [1] 10  5  3  4  5  6  7  8  9 10
modify(x,2)  <-10
x
x <- 1:10
x
modify(x,2)  <-10
x
?cor
x <- sample(replace = TRUE, 20, x = c(1:10, NA))
y <- runif(min = 0, max = 1, 20)
cor(m = "k", y = y, u = "p", x = x)
modify(get("x"), 1) <- 10
`+` <- function(a,b) a+b
"adsf" + "yxcv"
`+` <- function(a,b) paste(a,b)
"adsf" + "yxcv"
`+` <- function(a,b) paste(a,b, sep ="")
"adsf" + "yxcv"
1+1
rm("+")
1+1
apropos()
apropos("<-")
print(`[<-`)
?aporopos
?apropos
`%xor% <- function(a,b) (a&&!b) || (!a&&b)
`%xor% <- function(a,b) ((a&&!b) || (!a&&b))
`%xor%` <- function(a,b) ((a&&!b) || (!a&&b))
TRUE %xor% TRUE
`%xor%` <- function(a,b) (a&&!b) || (!a&&b)
TRUE %xor% TRUE
`%xor%` <- function(a,b) (a&&!b) || (!a&&b)
`%xor%` <- function(a,b) (a&!b) | (!a&b)
TRUE %xor% TRUE
`%xor%` <- function(a, b) (a & !b) | (!a & b)
TRUE %xor% TRUE
`%xor%` <- function(a, b) (a | b) & !(a & b)
TRUE %xor% TRUE
TRUE & FALSE
(TRUE & FALSE) | (TRUE & FALSE)
View(`(`)
View(`(`)
(TRUE & FALSE) | (TRUE & FALSE)
`%xor%` <- function(a,b) (a&&!b) || (!a&&b)
TRUE %xor% TRUE
TRUE %xor% TRUE
TRUE %xor% TRUE
TRUE %xor% FALSE
integrate
str(optimise(sin, c(0, 2 * pi)))
str(optimise(sin, c(0.1, 2 * pi)))
?appply
?apply
?eapply
?rapply
?scales
library(scales)
?scales
library(ggplot)
library(ggplot2)
library(rlang)
?rlang
power1 <- function(exp) {
function(x) {
x ^ exp
}
}
square <- power1(2)
cube <- power1(3)
power1 <- function(exp) {
function(x) {
x ^ exp
}
}
square <- power1(2)
cube <- power1(3)
library(rlang)
library(ggplot2)
library(scales)
square
cube
power1
?approxfun
approxfun
force
?ecdf
ecdf
approxfun
.Call()
.Call
.approxfun
pick <- function(i){
function(x){}
}
pick <- function(i){
function(x){
x[i]
}
}
r <- 1:10
pick(2)(r)
r <- r + 10
pick(2)(r)
lapply(mtcars, pick(5))
lapply(mtcars, function(x) x[[5]])
moment <- function(k){
function(x){
mean((x-mean(x))^2)
}
}
x <- runif(100)
stopifnot(all.equal(m1(x), 0))
m1 <- moment(1)
m2 <- moment(2)
x <- runif(100)
stopifnot(all.equal(m1(x), 0))
m1
moment <- function(k){
function(x){
mean((x-mean(x))^k)
}
}
m1 <- moment(1)
m2 <- moment(2)
x <- runif(100)
stopifnot(all.equal(m1(x), 0))
stopifnot(all.equal(m2(x), var(x) * 99 / 100))
i <- 0
new_counter2 <- function() {
i <<- i + 1
i
}
new_counter2()
new_counter2()
new_counter2()
new_counter2()
new_counter3 <- function() {
i <- 0
function() {
i <- i + 1
i
}
}
new_counter3()
c = new_counter3()
c()
c()
y <- c(12345, 123456, 1234567)
y <- c(12345, 123456, 1234567)
comma_format(y)
rm(c)
y <- c(12345, 123456, 1234567)
comma_format()(y)
#> [1] "12,345"    "123,456"   "1,234,567"
number_format(scale = 1e-3, suffix = " K")(y)
#> [1] "12 K"    "123 K"   "1 235 K"
df <- data.frame(x = 1, y = y)
core <- ggplot(df, aes(x, y)) +
geom_point() +
scale_x_continuous(breaks = 1, labels = NULL) +
labs(x = NULL, y = NULL)
core
core + scale_y_continuous(
labels = comma_format()
)
core + scale_y_continuous(
labels = number_format(scale = 1e-3, suffix = " K")
)
core + scale_y_continuous(
labels = scientific_format()
)
# construct some sample data with very different numbers in each cell
sd <- c(1, 5, 15)
n <- 100
df <- data.frame(x = rnorm(3 * n, sd = sd), sd = rep(sd, n))
ggplot(df, aes(x)) +
geom_histogram(binwidth = 2) +
facet_wrap(~ sd, scales = "free_x") +
labs(x = NULL)
# construct some sample data with very different numbers in each cell
sd <- c(1, 5, 15)
n <- 100
df <- data.frame(x = rnorm(3 * n, sd = sd), sd = rep(sd, n))
ggplot(df, aes(x)) +
geom_histogram(binwidth = 2) +
facet_wrap(~ sd, scales = "free_x") +
labs(x = NULL)
# construct some sample data with very different numbers in each cell
sd <- c(1, 5, 15)
n <- 100
df <- data.frame(x = rnorm(3 * n, sd = sd), sd = rep(sd, n))
ggplot(df, aes(x)) +
geom_histogram(binwidth = 2) +
facet_wrap(~ sd, scales = "free_x") +
labs(x = NULL)
# construct some sample data with very different numbers in each cell
sd <- c(1, 5, 15)
n <- 100
df <- data.frame(x = rnorm(3 * n, sd = sd), sd = rep(sd, n))
ggplot(df, aes(x)) +
geom_histogram(binwidth = 2) +
facet_wrap(~ sd, scales = "free_x") +
labs(x = NULL)
# construct some sample data with very different numbers in each cell
sd <- c(1, 5, 15)
n <- 100
df <- data.frame(x = rnorm(3 * n, sd = sd), sd = rep(sd, n))
ggplot(df, aes(x)) +
geom_histogram(binwidth = 2) +
facet_wrap(~ sd, scales = "free_x") +
labs(x = NULL)
# construct some sample data with very different numbers in each cell
sd <- c(1, 5, 15)
n <- 1000
df <- data.frame(x = rnorm(3 * n, sd = sd), sd = rep(sd, n))
ggplot(df, aes(x)) +
geom_histogram(binwidth = 2) +
facet_wrap(~ sd, scales = "free_x") +
labs(x = NULL)
# construct some sample data with very different numbers in each cell
sd <- c(1, 5, 15)
n <- 10000
df <- data.frame(x = rnorm(3 * n, sd = sd), sd = rep(sd, n))
ggplot(df, aes(x)) +
geom_histogram(binwidth = 2) +
facet_wrap(~ sd, scales = "free_x") +
labs(x = NULL)
# construct some sample data with very different numbers in each cell
sd <- c(1, 5, 15)
n <- 100000
df <- data.frame(x = rnorm(3 * n, sd = sd), sd = rep(sd, n))
ggplot(df, aes(x)) +
geom_histogram(binwidth = 2) +
facet_wrap(~ sd, scales = "free_x") +
labs(x = NULL)
# construct some sample data with very different numbers in each cell
sd <- c(1, 5, 15)
n <- 1000000
df <- data.frame(x = rnorm(3 * n, sd = sd), sd = rep(sd, n))
ggplot(df, aes(x)) +
geom_histogram(binwidth = 2) +
facet_wrap(~ sd, scales = "free_x") +
labs(x = NULL)
geom_histogram
?geom_histogram
binwidth_bins <- function(n) {
force(n)
function(x) {
(max(x) - min(x)) / n
}
}
ggplot(df, aes(x)) +
geom_histogram(binwidth = binwidth_bins(20)) +
facet_wrap(~ sd, scales = "free_x") +
labs(x = NULL)
nclass.Sturges
?nclass.Sturges
boxcox2 <- function(lambda) {
if (lambda == 0) {
function(x) log(x)
} else {
function(x) (x ^ lambda - 1) / lambda
}
}
stat_boxcox <- function(lambda) {
stat_function(aes(colour = lambda), fun = boxcox2(lambda), size = 1)
}
ggplot(data.frame(x = c(0, 5)), aes(x)) +
lapply(c(0.5, 1, 1.5), stat_boxcox) +
scale_colour_viridis_c(limits = c(0, 1.5))
#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
#> ℹ Please use `linewidth` instead.
#> This warning is displayed once every 8 hours.
#> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was
#> generated.
# visually, log() does seem to make sense as the transformation
# for lambda = 0; as values get smaller and smaller, the function
# gets close and closer to a log transformation
ggplot(data.frame(x = c(0.01, 1)), aes(x)) +
lapply(c(0.5, 0.25, 0.1, 0), stat_boxcox) +
scale_colour_viridis_c(limits = c(0, 1.5))
length
ll_poisson1 <- function(x) {
n <- length(x)
function(lambda) {
log(lambda) * sum(x) - n * lambda - sum(lfactorial(x))
}
}
ll_poisson2 <- function(x) {
n <- length(x)
sum_x <- sum(x)
c <- sum(lfactorial(x))
function(lambda) {
log(lambda) * sum_x - n * lambda - c
}
}
ll1 <- ll_poisson2(x1)
x1 <- c(41, 30, 31, 38, 29, 24, 30, 29, 31, 38)
ll1 <- ll_poisson2(x1)
ll1(10)
#> [1] -184
ll1(20)
#> [1] -61.1
ll1(30)
#> [1] -31
optimise(ll1, c(0, 100), maximum = TRUE)
#> $maximum
#> [1] 32.1
#>
#> $objective
#> [1] -30.3
bench::mark
install.packages("bench")
bench::mark
?bench::mark
bench::mark(optimise(ll1, c(0, 100), maximum = TRUE))
ll2 <- ll_poisson1(x1)
bench::mark(optimise(ll2, c(0, 100), maximum = TRUE))
x1 <- runif(1000)
bench::mark(optimise(ll1, c(0, 100), maximum = TRUE))
ll1 <- ll_poisson2(x1)
ll1(10)
#> [1] -184
ll1(20)
#> [1] -61.1
ll1(30)
#> [1] -31
ll2 <- ll_poisson1(x1)
bench::mark(optimise(ll1, c(0, 100), maximum = TRUE))
bench::mark(optimise(ll2, c(0, 100), maximum = TRUE))
with
?with
funs <- list(
mean = function(x) mean(x, na.rm = TRUE),
sum = function(x) sum(x, na.rm = TRUE)
)
attach(funs)
#> The following objects are masked from package:base:
#>
#>     mean, sum
mean <- function(x) stop("Hi!")
detach(funs)
env_bind(globalenv(), !!!funs)
mean <- function(x) stop("Hi!")
env_unbind(globalenv(), names(funs))
attach(funs)
#> The following objects are masked from package:base:
#>
#>     mean, sum
mean <- function(x) stop("Hi!")
detach(funs)
mean(x)
env_bind(globalenv(), !!!funs)
mean <- function(x) stop("Hi!")
env_unbind(globalenv(), names(funs))
mean(x)
attach(funs)
#> The following objects are masked from package:base:
#>
#>     mean, sum
mean <- function(x) stop("Hi!")
detach(funs)
mean(x)
env_bind(globalenv(), !!!funs)
mean <- function(x) stop("Hi!")
env_unbind(globalenv(), names(funs))
mean(x)
mean(x)
x <- runif(100000)
mean(x)
library(memoise)
?browser
slow_function <- function(x) {
Sys.sleep(1)
x * 10 * runif(1)
}
system.time(print(slow_function(1)))
#> [1] 0.808
#>    user  system elapsed
#>       0       0       1
system.time(print(slow_function(1)))
#> [1] 8.34
#>    user  system elapsed
#>   0.002   0.000   1.003
possibl<
<
possibly
library(purrr)
possibly
?as_mapper
safely
as_mapper
UseMethod()
UseMethod
library(sloop)
install.packages("sloop")
library(sloop)
otype(1:10)
otype("mtcars")
otype(1:10)
#> [1] "base"
otype(mtcars)
#> [1] "S3"
mle_obj <- stats4::mle(function(x = 1) (x - 2) ^ 2)
otype(mle_obj)
#> [1] "S4"
install.packages(c("devtools", "roxygen2", "testthat"))
Worldclim <- geodata::worldclim_global(var='bio', res=10, path=getwd())
View(Worldclim)
Worldclim
names(Worldclim)
wd
wd()
getwd()
setwd("/home/mathis/Desktop/semesterarbeit10/USE_MCMC_adaption")
getwd
getwd()
?grpel
??grepl
?grepl
load("/home/mathis/Downloads/Worldclim_tmp.rda")
View(Worldclim_tmp)
View(Worldclim_tmp)
rm(Worldclim_tmp)
getwd()
library(devtools)
library(devtools)
usethis::use_testthat(3)
