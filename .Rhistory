virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points)
View(rpc)
View(rpc)
load_all()
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
load_all()
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
View(myPres)
View(virtual.precence.points)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame(xy = TRUE) %>%
na.omit()
# Load required libraries
library(USE.MCMC)
library(terra)
library(virtualspecies)
library(sf)
library(ggplot2)
library(mclust)
#Nedded for plotting
par(mfrow = c(1, 1))
# load data
envData <- USE.MCMC::Worldclim_tmp %>%
terra::rast( type="xyz")
sfEnvData <- envData %>%
as.data.frame(xy = TRUE) %>%
sf::st_as_sf(coords = c("x", "y"))
set.seed(153)
# Generate the environmental space using PCA
rpc <- rastPCA(envData,  stand = TRUE)
envWithPc <- rpc$PCs %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(sfEnvData)
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame(xy = TRUE) %>%
na.omit()
virtual.precence.points.pc <- virtual.precence.points %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(virtual.precence.points)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame(x) %>%
na.omit()
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit()
virtual.precence.points.pc <- virtual.precence.points %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf(coords = c("x", "y"))
virtual.precence.points.pc <- virtual.precence.points %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf()
virtual.precence.points.pc <- virtual.precence.points %>%
as.data.frame(xy = TRUE)
virtual.precence.points.pc <- virtual.precence.points %>%
as.data.frame()
View(virtual.precence.points.pc)
View(virtual.precence.points.pc)
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- virtual.precence.points %>%
as.data.frame(,geom = TRUE)
View(virtual.precence.points)
virtual.precence.points
virtual.precence.points.pc <- virtual.precence.points %>%
as.data.frame(geom = TRUE)
as.data.frame(virtual.precence.points)
st_as_sf(virtual.precence.points)
virtual.precence.points.pc <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y")) %>%
na.omit() %>%
st_join(virtual.precence.points)
virtual.precence.points.pc <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(virtual.precence.points)
virtual.precence.points.pc <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(virtual.precence.points.pc)
virtual.precence.points.pc <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y"))
View(virtual.precence.points.pc)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit()
virtual.precence.points.pc <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(virtual.precence.points.pc)
traceback()
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit() %>%
st_as_sf()
virtual.precence.points.pc <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(virtual.precence.points.pc)
j.virtual.precence.points.pc <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(virtual.precence.points.pc)
# First, create the sf object from your original points
virtual.presence.points.sf <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y"))
# Then, extract PC values and create another sf object
pc_values <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit()
# Make sure the PC values data.frame has appropriate identifiers to join with
# Assuming there's an ID column or row numbers match between the two datasets
pc_values_sf <- pc_values %>%
sf::st_as_sf(coords = c("x", "y"))
View(virtual.presence.points.sf)
View(virtual.precence.points.pc)
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
# First, create the sf object from your original points
virtual.presence.points.sf <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y"))
# Then, extract PC values and create another sf object
pc_values_sf <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit()
# Now join the two sf objects
joined_points <- st_join(virtual.presence.points.sf, pc_values_sf)
# First, create the sf object from your original points
virtual.presence.points.sf <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y"))
# Then, extract PC values and create another sf object
pc_values <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit() %>%
sf::st_as_sf(x)
# First, create the sf object from your original points
virtual.presence.points.sf <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y"))
# Then, extract PC values and create another sf object
pc_values <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit() %>%
sf::st_as_sf()
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit() %>%
st_as_sf(coords = c("x", "y"))
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit() %>%
st_as_sf(coords = c("x", "y"))
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit() %>%
st_as_sf()
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit() %>%
st_as_sf()
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit() %>%
st_as_sf()
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit() %>%
st_as_sf()
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit()
#Nedded for plotting
par(mfrow = c(1, 1))
# load data
envData <- USE.MCMC::Worldclim_tmp %>%
terra::rast( type="xyz")
sfEnvData <- envData %>%
as.data.frame(xy = TRUE) %>%
sf::st_as_sf(coords = c("x", "y"))
set.seed(153)
# Generate the environmental space using PCA
rpc <- rastPCA(envData,  stand = TRUE)
envWithPc <- rpc$PCs %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(sfEnvData)
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit()
virtual.precence.points.pc <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y"))
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit()
virtual.precence.points <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y"))
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
st_as_sf() %>%
na.omit()
virtual.samples <- sf::st_join(virtual.precence.points.pc,virtual.precence.points)
?st_join
?st_as_sf
?left_join
View(virtual.precence.points)
View(virtual.precence.points.pc)
View(virtual.precence.points)
View(virtual.precence.points.pc)
View(virtual.precence.points)
virtual.samples <- dpylr::left_join(virtual.precence.points.pc,virtual.precence.points)
virtual.samples <- dplyr::left_join(virtual.precence.points.pc,virtual.precence.points)
virtual.samples <- dplyr::left_join(virtual.precence.points.pc, virtual.precence.points, by = "id")
rlang::last_trace()
View(virtual.precence.points.pc)
View(virtual.precence.points)
View(virtual.precence.points.pc)
View(virtual.precence.points)
load_all()
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit()
virtual.precence.points <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y"))
virtual.samples <- dplyr::left_join(virtual.precence.points.pc, virtual.precence.points, by = "id")
View(virtual.precence.points)
View(virtual.precence.points.pc)
View(virtual.precence.points)
View(virtual.precence.points)
load_all()
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
load_all()
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
load_all()
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame() %>%
na.omit()
virtual.precence.points <- virtual.precence.points %>%
sf::st_as_sf(coords = c("x", "y"))
virtual.precence.points["ID"] <- 1:nrow(virtual.precence.points)
View(virtual.precence.points)
virtual.samples <- dplyr::left_join(virtual.precence.points.pc, virtual.precence.points, by = "id")
virtual.samples <- dplyr::left_join(virtual.precence.points.pc, virtual.precence.points, by = "ID")
typeof(virtual.samples)
typeof(virtual.precence.points)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf(coords = c("x", "y"))
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points) %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf(coords = c("x", "y"))
?terra::extract
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf(coords = c("x", "y"))
#sample virtual species
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame(xy = TRUE)
View(virtual.samples)
typeof(virtual.samples)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf()
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame(xy = TRUE) %>%
na.omit()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
presenceData <- sf::st_drop_geometry(virtual.precence.points[dimensions])
presenceData <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
View(presenceData)
# presence model
precence.data.model <- mclust::densityMclust(presenceData, plot = TRUE)
summary(environmental.data.model)
summary(precence.data.model)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
lapply(dimensions, function(col) invisible(hist(sampled.points[[col]], main=paste("Histogram of sampled.points", col))))
lapply(dimensions, function(col) invisible(hist(envWithPc[[col]], main=paste("Histogram of envWithPc", col))))
lapply(dimensions, function(col) invisible(hist(envWithPc[[col]], main=paste("Histogram of envWithPc", col))))
lapply(dimensions, function(col) invisible(hist(sampled.points[[col]], main=paste("Histogram of sampled.points", col))))
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load(".RData")
# Load required libraries
library(USE.MCMC)
library(terra)
library(virtualspecies)
library(sf)
library(ggplot2)
#Nedded for plotting
par(mfrow = c(1, 1))
# load data
envData <- USE.MCMC::Worldclim_tmp %>%
terra::rast( type="xyz")
sfEnvData <- envData %>%
as.data.frame(xy = TRUE) %>%
sf::st_as_sf(coords = c("x", "y"))
# Create virtual species
set.seed(153)
# Generate the environmental space using PCA
rpc <- rastPCA(envData,  stand = TRUE)
envWithPc <- rpc$PCs %>%
as.data.frame(xy = TRUE) %>%
na.omit() %>%
sf::st_as_sf(coords = c("x", "y")) %>%
st_join(sfEnvData)
# subsample env space to speed up the process
envWithPc <- envWithPc[runif(nrow(envWithPc)/2, 1, nrow(envWithPc)),]
dimensions <- c("PC1", "PC2", "PC3", "PC4","PC5")
# cleaned data
environmentalData <- sf::st_drop_geometry(envWithPc[dimensions])
# environment model
environmental.data.model <- mclust::densityMclust(environmentalData, plot = TRUE)
summary(environmental.data.model)
environmental.densities <- predict.densityMclust(environmental.data.model, environmentalData)
environmental.densities <- mclust::predict.densityMclust(environmental.data.model, environmentalData)
threshold <- stats::quantile(environmental.densities, 0.01)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
library(mathisRhelpers)
gm()
load_all()
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame(xy = TRUE) %>%
na.omit()
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame() %>%
na.omit()
?terra::extract
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame() %>%
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame() %>%
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
as.data.frame() %>%
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE)
View(virtual.precence.points.pc)
print(virtual.precence.points.pc)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf() %>%
sf::st_drop_geometry()
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.precence.points.pc), plot = TRUE)
#density Function
densityFunction <- mclustDensityFunction(envionmentalMOdel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
#density Function
densityFunction <- mclustDensityFunction(envionmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
# set sampling parameters
covariance <-0.3
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# environment model
environmental.data.model <- mclust::densityMclust(environmentalData, plot = TRUE)
summary(environmental.data.model)
environmental.densities <- mclust::predict.densityMclust(environmental.data.model, environmentalData)
threshold <- stats::quantile(environmental.densities, 0.01)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
virtual.precence.points.pc <- terra::extract(rpc$PCs, virtual.precence.points, bind = TRUE) %>%
sf::st_as_sf()
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.precence.points.pc), plot = TRUE)
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
# set sampling parameters
covariance <-0.3
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.precence.points.pc[dim]), plot = TRUE)
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.precence.points.pc[dimensions]), plot = TRUE)
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
# set sampling parameters
covariance <-0.3
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
species.model = mclust::densityMclust(sf::st_drop_geometry(virtual.precence.points.pc[dimensions]), plot = TRUE)
virtual.precence.points.pc[dimensions]
sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions]
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
virtual.precence.points.pc <- sf::st_drop_geometry(virtual.precence.points.pc[dimensions])
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
# set sampling parameters
covariance <-0.3
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# sample species model
virtual.precence.points <- getVirtualSpeciesPresencePoints(environemtalData = envData, n.samples = 100)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
data
point
typeof(point)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
load_all()
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
load_all()
species.model = mclust::densityMclust(virtual.precence.points.pc, plot = TRUE)
#density Function
densityFunction <- mclustDensityFunction(environmentalModel = environmental.data.model, presenceModel = species.model,
dim = dimensions, threshold = threshold)
# set sampling parameters
covariance <-0.3
proposalFunction <- addHighDimGaussian(cov_mat =covariance * diag(length(dimensions)), dim = length(dimensions))
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
View(virtual.precence.points.pc)
View(environmentalData)
point <- environmentalData[1,]
point <- as.matrix(sf::st_drop_geometry(point[dim]))
point <- as.matrix(sf::st_drop_geometry(point[dimensions]))
point
mclustDensityFunction(environmentalModel = environmental.data.model, point)
densityFunction(point)
load_all()
densityFunction(point)
load_all()
View(species.model)
point <- as.matrix(sf::st_drop_geometry(point[dim]))
point <- environmentalData[1,]
point
densityFunction(point)
typeof(point)
typeof(as.matrix(point))
as.matrix(point)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
source("~/Desktop/semesterarbeit10/USE.MCMC/development_scripts/mcmc_test_script.R", echo=TRUE)
load_all()
# sample points
sampled.points <- mcmcSampling(dataset = envWithPc, dimensions = dimensions, n.sample.points = 1000,
proposalFunction = proposalFunction, densityFunction = densityFunction)
